// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medifor/v1/streamingproxy.proto

package mediforproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// FileChunk contains a single chunk of a file. It is intended to be part of a
// streaming protocol, so size and offset are implied
type FileChunk struct {
	// The name of the file. Should be sent with every chunk. Works best when every file sent is uniquely named.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The (optional) MIME type of the file.
	MimeType string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// This chunk's offset into the file specified by the name above.
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The total size of the file.
	TotalBytes int64 `protobuf:"varint,4,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// The value of this chunk.
	Value                []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c83d807c84235b2, []int{0}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileChunk) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *FileChunk) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FileChunk) GetTotalBytes() int64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *FileChunk) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// DetectionChunk is part of the streaming detection protocol, where detection
// objects are sent (both as request and response) along with the files that go
// with them.
type DetectionChunk struct {
	// Types that are valid to be assigned to Value:
	//	*DetectionChunk_Detection
	//	*DetectionChunk_FileChunk
	Value                isDetectionChunk_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DetectionChunk) Reset()         { *m = DetectionChunk{} }
func (m *DetectionChunk) String() string { return proto.CompactTextString(m) }
func (*DetectionChunk) ProtoMessage()    {}
func (*DetectionChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c83d807c84235b2, []int{1}
}

func (m *DetectionChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectionChunk.Unmarshal(m, b)
}
func (m *DetectionChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectionChunk.Marshal(b, m, deterministic)
}
func (m *DetectionChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectionChunk.Merge(m, src)
}
func (m *DetectionChunk) XXX_Size() int {
	return xxx_messageInfo_DetectionChunk.Size(m)
}
func (m *DetectionChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectionChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DetectionChunk proto.InternalMessageInfo

type isDetectionChunk_Value interface {
	isDetectionChunk_Value()
}

type DetectionChunk_Detection struct {
	Detection *Detection `protobuf:"bytes,1,opt,name=detection,proto3,oneof"`
}

type DetectionChunk_FileChunk struct {
	FileChunk *FileChunk `protobuf:"bytes,2,opt,name=file_chunk,json=fileChunk,proto3,oneof"`
}

func (*DetectionChunk_Detection) isDetectionChunk_Value() {}

func (*DetectionChunk_FileChunk) isDetectionChunk_Value() {}

func (m *DetectionChunk) GetValue() isDetectionChunk_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DetectionChunk) GetDetection() *Detection {
	if x, ok := m.GetValue().(*DetectionChunk_Detection); ok {
		return x.Detection
	}
	return nil
}

func (m *DetectionChunk) GetFileChunk() *FileChunk {
	if x, ok := m.GetValue().(*DetectionChunk_FileChunk); ok {
		return x.FileChunk
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DetectionChunk) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DetectionChunk_OneofMarshaler, _DetectionChunk_OneofUnmarshaler, _DetectionChunk_OneofSizer, []interface{}{
		(*DetectionChunk_Detection)(nil),
		(*DetectionChunk_FileChunk)(nil),
	}
}

func _DetectionChunk_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DetectionChunk)
	// value
	switch x := m.Value.(type) {
	case *DetectionChunk_Detection:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Detection); err != nil {
			return err
		}
	case *DetectionChunk_FileChunk:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileChunk); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DetectionChunk.Value has unexpected type %T", x)
	}
	return nil
}

func _DetectionChunk_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DetectionChunk)
	switch tag {
	case 1: // value.detection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Detection)
		err := b.DecodeMessage(msg)
		m.Value = &DetectionChunk_Detection{msg}
		return true, err
	case 2: // value.file_chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileChunk)
		err := b.DecodeMessage(msg)
		m.Value = &DetectionChunk_FileChunk{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DetectionChunk_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DetectionChunk)
	// value
	switch x := m.Value.(type) {
	case *DetectionChunk_Detection:
		s := proto.Size(x.Detection)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DetectionChunk_FileChunk:
		s := proto.Size(x.FileChunk)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*FileChunk)(nil), "mediforproto.FileChunk")
	proto.RegisterType((*DetectionChunk)(nil), "mediforproto.DetectionChunk")
}

func init() { proto.RegisterFile("medifor/v1/streamingproxy.proto", fileDescriptor_1c83d807c84235b2) }

var fileDescriptor_1c83d807c84235b2 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xcd, 0x4e, 0xf3, 0x30,
	0x10, 0xfc, 0xfc, 0xf5, 0x07, 0xb2, 0xad, 0x7a, 0xb0, 0x10, 0x0d, 0x05, 0xa9, 0x55, 0x4f, 0x39,
	0x35, 0x50, 0x0e, 0x70, 0x2e, 0x08, 0x71, 0x42, 0x28, 0x70, 0x2f, 0x6e, 0xba, 0x29, 0x16, 0x4e,
	0x1c, 0x25, 0x9b, 0x8a, 0x3c, 0x03, 0x3c, 0x34, 0x8a, 0x9d, 0x94, 0x4a, 0x08, 0x6e, 0x9e, 0x99,
	0x9d, 0xf1, 0xec, 0xc2, 0x38, 0xc6, 0xb5, 0x8c, 0x74, 0xe6, 0x6f, 0x2f, 0xfc, 0x9c, 0x32, 0x14,
	0xb1, 0x4c, 0x36, 0x69, 0xa6, 0xdf, 0xcb, 0x59, 0x9a, 0x69, 0xd2, 0xbc, 0x5f, 0x0f, 0x18, 0x34,
	0x1a, 0x6e, 0xb4, 0xde, 0x28, 0xf4, 0xb3, 0x34, 0xf4, 0x73, 0x12, 0x54, 0xe4, 0x76, 0x6c, 0x74,
	0xb2, 0x97, 0x23, 0x12, 0xa1, 0x4a, 0x92, 0xa1, 0x95, 0xa6, 0x1f, 0x0c, 0x9c, 0x3b, 0xa9, 0xf0,
	0xe6, 0xb5, 0x48, 0xde, 0x38, 0x87, 0x76, 0x22, 0x62, 0x74, 0xd9, 0x84, 0x79, 0x4e, 0x60, 0xde,
	0xfc, 0x14, 0x9c, 0x58, 0xc6, 0xb8, 0xa4, 0x32, 0x45, 0xf7, 0xbf, 0x11, 0x0e, 0x2b, 0xe2, 0xb9,
	0x4c, 0x91, 0x1f, 0x43, 0x57, 0x47, 0x51, 0x8e, 0xe4, 0xb6, 0x26, 0xcc, 0x6b, 0x05, 0x35, 0xe2,
	0x63, 0xe8, 0x91, 0x26, 0xa1, 0x96, 0xab, 0x92, 0x30, 0x77, 0xdb, 0x46, 0x04, 0x43, 0x2d, 0x2a,
	0x86, 0x1f, 0x41, 0x67, 0x2b, 0x54, 0x81, 0x6e, 0x67, 0xc2, 0xbc, 0x7e, 0x60, 0xc1, 0xf4, 0x93,
	0xc1, 0xe0, 0x16, 0x09, 0x43, 0x92, 0x3a, 0xb1, 0x95, 0xae, 0xc0, 0x59, 0x37, 0x8c, 0xe9, 0xd5,
	0x9b, 0x0f, 0x67, 0xfb, 0x6b, 0xcf, 0x76, 0x86, 0xfb, 0x7f, 0xc1, 0xf7, 0x2c, 0xbf, 0x06, 0x88,
	0xa4, 0xc2, 0x65, 0x58, 0xc5, 0x98, 0xe2, 0x3f, 0x9c, 0xbb, 0xc5, 0x2b, 0x67, 0xd4, 0x80, 0xc5,
	0x41, 0xdd, 0x6d, 0xfe, 0x02, 0x83, 0xa7, 0xe6, 0xec, 0x8f, 0xd5, 0xd9, 0xf9, 0x03, 0xf4, 0xed,
	0x77, 0x96, 0xe7, 0x67, 0xbf, 0x54, 0x31, 0x41, 0xa3, 0x3f, 0x55, 0x8f, 0x9d, 0xb3, 0x55, 0xd7,
	0x28, 0x97, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x68, 0x44, 0xfb, 0xea, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamingProxyClient is the client API for StreamingProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingProxyClient interface {
	DetectStream(ctx context.Context, opts ...grpc.CallOption) (StreamingProxy_DetectStreamClient, error)
}

type streamingProxyClient struct {
	cc *grpc.ClientConn
}

func NewStreamingProxyClient(cc *grpc.ClientConn) StreamingProxyClient {
	return &streamingProxyClient{cc}
}

func (c *streamingProxyClient) DetectStream(ctx context.Context, opts ...grpc.CallOption) (StreamingProxy_DetectStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingProxy_serviceDesc.Streams[0], "/mediforproto.StreamingProxy/DetectStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingProxyDetectStreamClient{stream}
	return x, nil
}

type StreamingProxy_DetectStreamClient interface {
	Send(*DetectionChunk) error
	Recv() (*DetectionChunk, error)
	grpc.ClientStream
}

type streamingProxyDetectStreamClient struct {
	grpc.ClientStream
}

func (x *streamingProxyDetectStreamClient) Send(m *DetectionChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingProxyDetectStreamClient) Recv() (*DetectionChunk, error) {
	m := new(DetectionChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingProxyServer is the server API for StreamingProxy service.
type StreamingProxyServer interface {
	DetectStream(StreamingProxy_DetectStreamServer) error
}

func RegisterStreamingProxyServer(s *grpc.Server, srv StreamingProxyServer) {
	s.RegisterService(&_StreamingProxy_serviceDesc, srv)
}

func _StreamingProxy_DetectStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingProxyServer).DetectStream(&streamingProxyDetectStreamServer{stream})
}

type StreamingProxy_DetectStreamServer interface {
	Send(*DetectionChunk) error
	Recv() (*DetectionChunk, error)
	grpc.ServerStream
}

type streamingProxyDetectStreamServer struct {
	grpc.ServerStream
}

func (x *streamingProxyDetectStreamServer) Send(m *DetectionChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingProxyDetectStreamServer) Recv() (*DetectionChunk, error) {
	m := new(DetectionChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamingProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mediforproto.StreamingProxy",
	HandlerType: (*StreamingProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectStream",
			Handler:       _StreamingProxy_DetectStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "medifor/v1/streamingproxy.proto",
}
