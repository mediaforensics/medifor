// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: medifor/v1/task.proto

package mediforproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DetectionTask contains a Detection (partial - holding only the
// request) and enough surrounding machinery to allow workflow tasks to
// maintain state in a larger system.
// Next Tag: 10
type DetectionTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier that uniquely represents this particular detection task.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Analytics to run this detection on. When a single analytic receives a task
	// like this, there will only be one value in this field. When pushing a
	// completed task, this ID should be preserved so that proper attribution
	// occurs.
	AnalyticId []string `protobuf:"bytes,2,rep,name=analytic_id,json=analyticId,proto3" json:"analytic_id,omitempty"`
	// Fusers to run when all analytics are finished for this detection.
	// Can be empty, in which case no fusion will be triggered on completion.
	FuserId []string `protobuf:"bytes,9,rep,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	// A partial detection, containing an incomplete request (can be missing the
	// request ID, for example) with just enough information in it to pass it on
	// to an analytic.
	Detection *Detection `protobuf:"bytes,3,opt,name=detection,proto3" json:"detection,omitempty"`
	// The queue into which a response should be inserted when this task is
	// either finished or has encountered a permanent error.
	DoneQueue string `protobuf:"bytes,4,opt,name=done_queue,json=doneQueue,proto3" json:"done_queue,omitempty"`
	// System tags for grouping things. Use user_tags if you aren't sure which
	// one to use.
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// User tags.
	UserTags map[string]string `protobuf:"bytes,7,rep,name=user_tags,json=userTags,proto3" json:"user_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Metadata table.
	Meta map[string]string `protobuf:"bytes,8,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timeout in seconds after which an analytic worker will die waiting for the
	// analytic to respond. Default is "no timeout" (0 seconds).
	AnalyticTimeoutSec int64 `protobuf:"varint,6,opt,name=analytic_timeout_sec,json=analyticTimeoutSec,proto3" json:"analytic_timeout_sec,omitempty"`
}

func (x *DetectionTask) Reset() {
	*x = DetectionTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionTask) ProtoMessage() {}

func (x *DetectionTask) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionTask.ProtoReflect.Descriptor instead.
func (*DetectionTask) Descriptor() ([]byte, []int) {
	return file_medifor_v1_task_proto_rawDescGZIP(), []int{0}
}

func (x *DetectionTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetectionTask) GetAnalyticId() []string {
	if x != nil {
		return x.AnalyticId
	}
	return nil
}

func (x *DetectionTask) GetFuserId() []string {
	if x != nil {
		return x.FuserId
	}
	return nil
}

func (x *DetectionTask) GetDetection() *Detection {
	if x != nil {
		return x.Detection
	}
	return nil
}

func (x *DetectionTask) GetDoneQueue() string {
	if x != nil {
		return x.DoneQueue
	}
	return ""
}

func (x *DetectionTask) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DetectionTask) GetUserTags() map[string]string {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *DetectionTask) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DetectionTask) GetAnalyticTimeoutSec() int64 {
	if x != nil {
		return x.AnalyticTimeoutSec
	}
	return 0
}

// Next ID: 8
type FusionTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the fusion task
	UnusedId string `protobuf:"bytes,1,opt,name=unused_id,json=unusedId,proto3" json:"unused_id,omitempty"`
	// Fusion algorithms to run this fusion on.
	FuserId []string `protobuf:"bytes,2,rep,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	// A partial fusion (request filled out, requestID may be missing)
	Fusion *Fusion `protobuf:"bytes,3,opt,name=fusion,proto3" json:"fusion,omitempty"`
	// The queue into which a response is inserted when this task has completed or
	// encountered a permanent error
	DoneQueue string `protobuf:"bytes,4,opt,name=done_queue,json=doneQueue,proto3" json:"done_queue,omitempty"`
	// Tag map
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timeout in seconds after which an analytic worker will die waiting for the
	// analytic to respond. Default is "no timeout" (0 seconds).
	AnalyticTimeoutSec int64 `protobuf:"varint,6,opt,name=analytic_timeout_sec,json=analyticTimeoutSec,proto3" json:"analytic_timeout_sec,omitempty"`
	// detection_id for the detections to be fused.  Required for database writes
	DetectionId string `protobuf:"bytes,7,opt,name=detection_id,json=detectionId,proto3" json:"detection_id,omitempty"`
}

func (x *FusionTask) Reset() {
	*x = FusionTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FusionTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FusionTask) ProtoMessage() {}

func (x *FusionTask) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FusionTask.ProtoReflect.Descriptor instead.
func (*FusionTask) Descriptor() ([]byte, []int) {
	return file_medifor_v1_task_proto_rawDescGZIP(), []int{1}
}

func (x *FusionTask) GetUnusedId() string {
	if x != nil {
		return x.UnusedId
	}
	return ""
}

func (x *FusionTask) GetFuserId() []string {
	if x != nil {
		return x.FuserId
	}
	return nil
}

func (x *FusionTask) GetFusion() *Fusion {
	if x != nil {
		return x.Fusion
	}
	return nil
}

func (x *FusionTask) GetDoneQueue() string {
	if x != nil {
		return x.DoneQueue
	}
	return ""
}

func (x *FusionTask) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FusionTask) GetAnalyticTimeoutSec() int64 {
	if x != nil {
		return x.AnalyticTimeoutSec
	}
	return 0
}

func (x *FusionTask) GetDetectionId() string {
	if x != nil {
		return x.DetectionId
	}
	return ""
}

var File_medifor_v1_task_proto protoreflect.FileDescriptor

var file_medifor_v1_task_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x04, 0x0a, 0x0d, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x39, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x39, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x02, 0x0a,
	0x0a, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x66, 0x6f, 0x72, 0x65, 0x6e, 0x73,
	0x69, 0x63, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_medifor_v1_task_proto_rawDescOnce sync.Once
	file_medifor_v1_task_proto_rawDescData = file_medifor_v1_task_proto_rawDesc
)

func file_medifor_v1_task_proto_rawDescGZIP() []byte {
	file_medifor_v1_task_proto_rawDescOnce.Do(func() {
		file_medifor_v1_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_medifor_v1_task_proto_rawDescData)
	})
	return file_medifor_v1_task_proto_rawDescData
}

var file_medifor_v1_task_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_medifor_v1_task_proto_goTypes = []interface{}{
	(*DetectionTask)(nil), // 0: mediforproto.DetectionTask
	(*FusionTask)(nil),    // 1: mediforproto.FusionTask
	nil,                   // 2: mediforproto.DetectionTask.TagsEntry
	nil,                   // 3: mediforproto.DetectionTask.UserTagsEntry
	nil,                   // 4: mediforproto.DetectionTask.MetaEntry
	nil,                   // 5: mediforproto.FusionTask.TagsEntry
	(*Detection)(nil),     // 6: mediforproto.Detection
	(*Fusion)(nil),        // 7: mediforproto.Fusion
}
var file_medifor_v1_task_proto_depIdxs = []int32{
	6, // 0: mediforproto.DetectionTask.detection:type_name -> mediforproto.Detection
	2, // 1: mediforproto.DetectionTask.tags:type_name -> mediforproto.DetectionTask.TagsEntry
	3, // 2: mediforproto.DetectionTask.user_tags:type_name -> mediforproto.DetectionTask.UserTagsEntry
	4, // 3: mediforproto.DetectionTask.meta:type_name -> mediforproto.DetectionTask.MetaEntry
	7, // 4: mediforproto.FusionTask.fusion:type_name -> mediforproto.Fusion
	5, // 5: mediforproto.FusionTask.tags:type_name -> mediforproto.FusionTask.TagsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_medifor_v1_task_proto_init() }
func file_medifor_v1_task_proto_init() {
	if File_medifor_v1_task_proto != nil {
		return
	}
	file_medifor_v1_analytic_proto_init()
	file_medifor_v1_fusion_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_medifor_v1_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FusionTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_medifor_v1_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_medifor_v1_task_proto_goTypes,
		DependencyIndexes: file_medifor_v1_task_proto_depIdxs,
		MessageInfos:      file_medifor_v1_task_proto_msgTypes,
	}.Build()
	File_medifor_v1_task_proto = out.File
	file_medifor_v1_task_proto_rawDesc = nil
	file_medifor_v1_task_proto_goTypes = nil
	file_medifor_v1_task_proto_depIdxs = nil
}
