// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: medifor/v1/fusion.proto

package mediforproto

import (
	context "context"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Fusion holds round-trip information for any of the "FuseFoo" request/response endpoints.
type Fusion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard RPC status - we stash the actual RPC error/non-error here.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Round-trip request-response timings. Milliseconds since the Epoch.
	StartTimeMillis int64 `protobuf:"varint,2,opt,name=start_time_millis,json=startTimeMillis,proto3" json:"start_time_millis,omitempty"`
	EndTimeMillis   int64 `protobuf:"varint,3,opt,name=end_time_millis,json=endTimeMillis,proto3" json:"end_time_millis,omitempty"`
	// The request made to the analytic.
	//
	// Types that are assignable to Request:
	//	*Fusion_ImgManipReq
	//	*Fusion_VidManipReq
	//	*Fusion_ImgSpliceReq
	//	*Fusion_ImgCamMatchReq
	Request isFusion_Request `protobuf_oneof:"request"`
	// The response received from the analytic.
	//
	// Types that are assignable to Response:
	//	*Fusion_ImgManip
	//	*Fusion_VidManip
	//	*Fusion_ImgSplice
	//	*Fusion_ImgCamMatch
	Response isFusion_Response `protobuf_oneof:"response"`
}

func (x *Fusion) Reset() {
	*x = Fusion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fusion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fusion) ProtoMessage() {}

func (x *Fusion) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fusion.ProtoReflect.Descriptor instead.
func (*Fusion) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{0}
}

func (x *Fusion) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Fusion) GetStartTimeMillis() int64 {
	if x != nil {
		return x.StartTimeMillis
	}
	return 0
}

func (x *Fusion) GetEndTimeMillis() int64 {
	if x != nil {
		return x.EndTimeMillis
	}
	return 0
}

func (m *Fusion) GetRequest() isFusion_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *Fusion) GetImgManipReq() *FuseImageManipulationRequest {
	if x, ok := x.GetRequest().(*Fusion_ImgManipReq); ok {
		return x.ImgManipReq
	}
	return nil
}

func (x *Fusion) GetVidManipReq() *FuseVideoManipulationRequest {
	if x, ok := x.GetRequest().(*Fusion_VidManipReq); ok {
		return x.VidManipReq
	}
	return nil
}

func (x *Fusion) GetImgSpliceReq() *FuseImageSpliceRequest {
	if x, ok := x.GetRequest().(*Fusion_ImgSpliceReq); ok {
		return x.ImgSpliceReq
	}
	return nil
}

func (x *Fusion) GetImgCamMatchReq() *FuseImageCameraMatchRequest {
	if x, ok := x.GetRequest().(*Fusion_ImgCamMatchReq); ok {
		return x.ImgCamMatchReq
	}
	return nil
}

func (m *Fusion) GetResponse() isFusion_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *Fusion) GetImgManip() *ImageManipulation {
	if x, ok := x.GetResponse().(*Fusion_ImgManip); ok {
		return x.ImgManip
	}
	return nil
}

func (x *Fusion) GetVidManip() *VideoManipulation {
	if x, ok := x.GetResponse().(*Fusion_VidManip); ok {
		return x.VidManip
	}
	return nil
}

func (x *Fusion) GetImgSplice() *ImageSplice {
	if x, ok := x.GetResponse().(*Fusion_ImgSplice); ok {
		return x.ImgSplice
	}
	return nil
}

func (x *Fusion) GetImgCamMatch() *ImageCameraMatch {
	if x, ok := x.GetResponse().(*Fusion_ImgCamMatch); ok {
		return x.ImgCamMatch
	}
	return nil
}

type isFusion_Request interface {
	isFusion_Request()
}

type Fusion_ImgManipReq struct {
	ImgManipReq *FuseImageManipulationRequest `protobuf:"bytes,11,opt,name=img_manip_req,json=imgManipReq,proto3,oneof"`
}

type Fusion_VidManipReq struct {
	VidManipReq *FuseVideoManipulationRequest `protobuf:"bytes,12,opt,name=vid_manip_req,json=vidManipReq,proto3,oneof"`
}

type Fusion_ImgSpliceReq struct {
	ImgSpliceReq *FuseImageSpliceRequest `protobuf:"bytes,13,opt,name=img_splice_req,json=imgSpliceReq,proto3,oneof"`
}

type Fusion_ImgCamMatchReq struct {
	ImgCamMatchReq *FuseImageCameraMatchRequest `protobuf:"bytes,14,opt,name=img_cam_match_req,json=imgCamMatchReq,proto3,oneof"`
}

func (*Fusion_ImgManipReq) isFusion_Request() {}

func (*Fusion_VidManipReq) isFusion_Request() {}

func (*Fusion_ImgSpliceReq) isFusion_Request() {}

func (*Fusion_ImgCamMatchReq) isFusion_Request() {}

type isFusion_Response interface {
	isFusion_Response()
}

type Fusion_ImgManip struct {
	ImgManip *ImageManipulation `protobuf:"bytes,21,opt,name=img_manip,json=imgManip,proto3,oneof"`
}

type Fusion_VidManip struct {
	VidManip *VideoManipulation `protobuf:"bytes,22,opt,name=vid_manip,json=vidManip,proto3,oneof"`
}

type Fusion_ImgSplice struct {
	ImgSplice *ImageSplice `protobuf:"bytes,23,opt,name=img_splice,json=imgSplice,proto3,oneof"`
}

type Fusion_ImgCamMatch struct {
	ImgCamMatch *ImageCameraMatch `protobuf:"bytes,24,opt,name=img_cam_match,json=imgCamMatch,proto3,oneof"`
}

func (*Fusion_ImgManip) isFusion_Response() {}

func (*Fusion_VidManip) isFusion_Response() {}

func (*Fusion_ImgSplice) isFusion_Response() {}

func (*Fusion_ImgCamMatch) isFusion_Response() {}

// Next Tag: 4
type AnnotatedImageManipulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string             `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Data    *ImageManipulation `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AnnotatedImageManipulation) Reset() {
	*x = AnnotatedImageManipulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedImageManipulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedImageManipulation) ProtoMessage() {}

func (x *AnnotatedImageManipulation) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedImageManipulation.ProtoReflect.Descriptor instead.
func (*AnnotatedImageManipulation) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{1}
}

func (x *AnnotatedImageManipulation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnnotatedImageManipulation) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AnnotatedImageManipulation) GetData() *ImageManipulation {
	if x != nil {
		return x.Data
	}
	return nil
}

// Next Tag: 6
type FuseImageManipulationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string                        `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OutDir      string                        `protobuf:"bytes,2,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	ImgManipReq *ImageManipulationRequest     `protobuf:"bytes,3,opt,name=img_manip_req,json=imgManipReq,proto3" json:"img_manip_req,omitempty"`
	ImgManip    []*AnnotatedImageManipulation `protobuf:"bytes,4,rep,name=img_manip,json=imgManip,proto3" json:"img_manip,omitempty"`
	// If this is set, the fusion algorithm should produce mask output. Otherwise
	// it should only produce a score.
	WantMasks bool `protobuf:"varint,5,opt,name=want_masks,json=wantMasks,proto3" json:"want_masks,omitempty"`
}

func (x *FuseImageManipulationRequest) Reset() {
	*x = FuseImageManipulationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseImageManipulationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseImageManipulationRequest) ProtoMessage() {}

func (x *FuseImageManipulationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseImageManipulationRequest.ProtoReflect.Descriptor instead.
func (*FuseImageManipulationRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{2}
}

func (x *FuseImageManipulationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *FuseImageManipulationRequest) GetOutDir() string {
	if x != nil {
		return x.OutDir
	}
	return ""
}

func (x *FuseImageManipulationRequest) GetImgManipReq() *ImageManipulationRequest {
	if x != nil {
		return x.ImgManipReq
	}
	return nil
}

func (x *FuseImageManipulationRequest) GetImgManip() []*AnnotatedImageManipulation {
	if x != nil {
		return x.ImgManip
	}
	return nil
}

func (x *FuseImageManipulationRequest) GetWantMasks() bool {
	if x != nil {
		return x.WantMasks
	}
	return false
}

// Next Tag: 4
type AnnotatedVideoManipulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string             `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Data    *VideoManipulation `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AnnotatedVideoManipulation) Reset() {
	*x = AnnotatedVideoManipulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedVideoManipulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedVideoManipulation) ProtoMessage() {}

func (x *AnnotatedVideoManipulation) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedVideoManipulation.ProtoReflect.Descriptor instead.
func (*AnnotatedVideoManipulation) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{3}
}

func (x *AnnotatedVideoManipulation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnnotatedVideoManipulation) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AnnotatedVideoManipulation) GetData() *VideoManipulation {
	if x != nil {
		return x.Data
	}
	return nil
}

// Next Tag: 6
type FuseVideoManipulationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string                        `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OutDir      string                        `protobuf:"bytes,2,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	VidManipReq *VideoManipulationRequest     `protobuf:"bytes,3,opt,name=vid_manip_req,json=vidManipReq,proto3" json:"vid_manip_req,omitempty"`
	VidManip    []*AnnotatedVideoManipulation `protobuf:"bytes,4,rep,name=vid_manip,json=vidManip,proto3" json:"vid_manip,omitempty"`
	// If this is set, the fusion algorithm should produce mask output. Otherwise
	// it should only produce a score.
	WantMasks bool `protobuf:"varint,5,opt,name=want_masks,json=wantMasks,proto3" json:"want_masks,omitempty"`
}

func (x *FuseVideoManipulationRequest) Reset() {
	*x = FuseVideoManipulationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseVideoManipulationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseVideoManipulationRequest) ProtoMessage() {}

func (x *FuseVideoManipulationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseVideoManipulationRequest.ProtoReflect.Descriptor instead.
func (*FuseVideoManipulationRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{4}
}

func (x *FuseVideoManipulationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *FuseVideoManipulationRequest) GetOutDir() string {
	if x != nil {
		return x.OutDir
	}
	return ""
}

func (x *FuseVideoManipulationRequest) GetVidManipReq() *VideoManipulationRequest {
	if x != nil {
		return x.VidManipReq
	}
	return nil
}

func (x *FuseVideoManipulationRequest) GetVidManip() []*AnnotatedVideoManipulation {
	if x != nil {
		return x.VidManip
	}
	return nil
}

func (x *FuseVideoManipulationRequest) GetWantMasks() bool {
	if x != nil {
		return x.WantMasks
	}
	return false
}

// Next Tag: 4
type AnnotatedImageSplice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Data    *ImageSplice `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AnnotatedImageSplice) Reset() {
	*x = AnnotatedImageSplice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedImageSplice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedImageSplice) ProtoMessage() {}

func (x *AnnotatedImageSplice) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedImageSplice.ProtoReflect.Descriptor instead.
func (*AnnotatedImageSplice) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{5}
}

func (x *AnnotatedImageSplice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnnotatedImageSplice) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AnnotatedImageSplice) GetData() *ImageSplice {
	if x != nil {
		return x.Data
	}
	return nil
}

// Next Tag: 6
type FuseImageSpliceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    string                  `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OutDir       string                  `protobuf:"bytes,2,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	ImgSpliceReq *ImageSpliceRequest     `protobuf:"bytes,3,opt,name=img_splice_req,json=imgSpliceReq,proto3" json:"img_splice_req,omitempty"`
	ImgSplice    []*AnnotatedImageSplice `protobuf:"bytes,4,rep,name=img_splice,json=imgSplice,proto3" json:"img_splice,omitempty"`
	// If this is set, the fusion algorithm should produce mask output. Otherwise
	// it should only produce a score.
	WantMasks bool `protobuf:"varint,5,opt,name=want_masks,json=wantMasks,proto3" json:"want_masks,omitempty"`
}

func (x *FuseImageSpliceRequest) Reset() {
	*x = FuseImageSpliceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseImageSpliceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseImageSpliceRequest) ProtoMessage() {}

func (x *FuseImageSpliceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseImageSpliceRequest.ProtoReflect.Descriptor instead.
func (*FuseImageSpliceRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{6}
}

func (x *FuseImageSpliceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *FuseImageSpliceRequest) GetOutDir() string {
	if x != nil {
		return x.OutDir
	}
	return ""
}

func (x *FuseImageSpliceRequest) GetImgSpliceReq() *ImageSpliceRequest {
	if x != nil {
		return x.ImgSpliceReq
	}
	return nil
}

func (x *FuseImageSpliceRequest) GetImgSplice() []*AnnotatedImageSplice {
	if x != nil {
		return x.ImgSplice
	}
	return nil
}

func (x *FuseImageSpliceRequest) GetWantMasks() bool {
	if x != nil {
		return x.WantMasks
	}
	return false
}

// Next Tag: 4
type AnnotatedImageCameraMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Data    *ImageCameraMatch `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AnnotatedImageCameraMatch) Reset() {
	*x = AnnotatedImageCameraMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedImageCameraMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedImageCameraMatch) ProtoMessage() {}

func (x *AnnotatedImageCameraMatch) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedImageCameraMatch.ProtoReflect.Descriptor instead.
func (*AnnotatedImageCameraMatch) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{7}
}

func (x *AnnotatedImageCameraMatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnnotatedImageCameraMatch) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AnnotatedImageCameraMatch) GetData() *ImageCameraMatch {
	if x != nil {
		return x.Data
	}
	return nil
}

// Next Tag: 6
type FuseImageCameraMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      string                       `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OutDir         string                       `protobuf:"bytes,2,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	ImgCamMatchReq *ImageCameraMatchRequest     `protobuf:"bytes,3,opt,name=img_cam_match_req,json=imgCamMatchReq,proto3" json:"img_cam_match_req,omitempty"`
	ImgCamMatch    []*AnnotatedImageCameraMatch `protobuf:"bytes,4,rep,name=img_cam_match,json=imgCamMatch,proto3" json:"img_cam_match,omitempty"`
	// If this is set, the fusion algorithm should produce mask output. Otherwise
	// it should only produce a score.
	WantMasks bool `protobuf:"varint,5,opt,name=want_masks,json=wantMasks,proto3" json:"want_masks,omitempty"`
}

func (x *FuseImageCameraMatchRequest) Reset() {
	*x = FuseImageCameraMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseImageCameraMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseImageCameraMatchRequest) ProtoMessage() {}

func (x *FuseImageCameraMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseImageCameraMatchRequest.ProtoReflect.Descriptor instead.
func (*FuseImageCameraMatchRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{8}
}

func (x *FuseImageCameraMatchRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *FuseImageCameraMatchRequest) GetOutDir() string {
	if x != nil {
		return x.OutDir
	}
	return ""
}

func (x *FuseImageCameraMatchRequest) GetImgCamMatchReq() *ImageCameraMatchRequest {
	if x != nil {
		return x.ImgCamMatchReq
	}
	return nil
}

func (x *FuseImageCameraMatchRequest) GetImgCamMatch() []*AnnotatedImageCameraMatch {
	if x != nil {
		return x.ImgCamMatch
	}
	return nil
}

func (x *FuseImageCameraMatchRequest) GetWantMasks() bool {
	if x != nil {
		return x.WantMasks
	}
	return false
}

// Next Tag: 4
type AnnotatedVideoCameraMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Data    *VideoCameraMatch `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AnnotatedVideoCameraMatch) Reset() {
	*x = AnnotatedVideoCameraMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedVideoCameraMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedVideoCameraMatch) ProtoMessage() {}

func (x *AnnotatedVideoCameraMatch) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedVideoCameraMatch.ProtoReflect.Descriptor instead.
func (*AnnotatedVideoCameraMatch) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{9}
}

func (x *AnnotatedVideoCameraMatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnnotatedVideoCameraMatch) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AnnotatedVideoCameraMatch) GetData() *VideoCameraMatch {
	if x != nil {
		return x.Data
	}
	return nil
}

// Next Tag: 6
type FuseVideoCameraMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      string                       `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OutDir         string                       `protobuf:"bytes,2,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	VidCamMatchReq *VideoCameraMatchRequest     `protobuf:"bytes,3,opt,name=vid_cam_match_req,json=vidCamMatchReq,proto3" json:"vid_cam_match_req,omitempty"`
	VidCamMatch    []*AnnotatedVideoCameraMatch `protobuf:"bytes,4,rep,name=vid_cam_match,json=vidCamMatch,proto3" json:"vid_cam_match,omitempty"`
	// If this is set, the fusion algorithm should produce mask output. Otherwise
	// it should only produce a score.
	WantMasks bool `protobuf:"varint,5,opt,name=want_masks,json=wantMasks,proto3" json:"want_masks,omitempty"`
}

func (x *FuseVideoCameraMatchRequest) Reset() {
	*x = FuseVideoCameraMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_fusion_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseVideoCameraMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseVideoCameraMatchRequest) ProtoMessage() {}

func (x *FuseVideoCameraMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_fusion_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseVideoCameraMatchRequest.ProtoReflect.Descriptor instead.
func (*FuseVideoCameraMatchRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_fusion_proto_rawDescGZIP(), []int{10}
}

func (x *FuseVideoCameraMatchRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *FuseVideoCameraMatchRequest) GetOutDir() string {
	if x != nil {
		return x.OutDir
	}
	return ""
}

func (x *FuseVideoCameraMatchRequest) GetVidCamMatchReq() *VideoCameraMatchRequest {
	if x != nil {
		return x.VidCamMatchReq
	}
	return nil
}

func (x *FuseVideoCameraMatchRequest) GetVidCamMatch() []*AnnotatedVideoCameraMatch {
	if x != nil {
		return x.VidCamMatch
	}
	return nil
}

func (x *FuseVideoCameraMatchRequest) GetWantMasks() bool {
	if x != nil {
		return x.WantMasks
	}
	return false
}

var File_medifor_v1_fusion_proto protoreflect.FileDescriptor

var file_medifor_v1_fusion_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x66,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x05, 0x0a, 0x06,
	0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x69, 0x6d, 0x67, 0x5f, 0x6d, 0x61,
	0x6e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6d, 0x67,
	0x4d, 0x61, 0x6e, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x50, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x5f,
	0x6d, 0x61, 0x6e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x73, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x76,
	0x69, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x6d,
	0x67, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x67, 0x53,
	0x70, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x11, 0x69, 0x6d, 0x67, 0x5f,
	0x63, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x69, 0x6d, 0x67, 0x43, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x70,
	0x12, 0x3e, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x08, 0x76, 0x69, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x70,
	0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6d, 0x67, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x48,
	0x01, 0x52, 0x09, 0x69, 0x6d, 0x67, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x69, 0x6d, 0x67, 0x5f, 0x63, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x6d, 0x67, 0x43, 0x61, 0x6d, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x1a, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x02, 0x0a, 0x1c, 0x46, 0x75, 0x73, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12,
	0x4a, 0x0a, 0x0d, 0x69, 0x6d, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x69, 0x6d, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x09, 0x69,
	0x6d, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x4d, 0x61, 0x6e,
	0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x73, 0x22, 0x7b, 0x0a, 0x1a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88,
	0x02, 0x0a, 0x1c, 0x46, 0x75, 0x73, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x5f, 0x6d,
	0x61, 0x6e, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x76, 0x69, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x77, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x6f, 0x0a, 0x14, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x6c, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x16, 0x46,
	0x75, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x46, 0x0a,
	0x0e, 0x69, 0x6d, 0x67, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x69, 0x6d, 0x67, 0x53, 0x70, 0x6c, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x6d, 0x67, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6d, 0x67, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61,
	0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x79, 0x0a, 0x19, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x93, 0x02, 0x0a, 0x1b, 0x46, 0x75, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x6d,
	0x67, 0x5f, 0x63, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x69, 0x6d,
	0x67, 0x43, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x0d,
	0x69, 0x6d, 0x67, 0x5f, 0x63, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x69, 0x6d,
	0x67, 0x43, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77,
	0x61, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x79, 0x0a, 0x19, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x93, 0x02, 0x0a, 0x1b, 0x46, 0x75, 0x73, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x76,
	0x69, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x76,
	0x69, 0x64, 0x43, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a,
	0x0d, 0x76, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x76,
	0x69, 0x64, 0x43, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x77, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x32, 0x9f, 0x04, 0x0a, 0x05, 0x46, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x15, 0x46, 0x75, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e,
	0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f, 0x46, 0x75, 0x73,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a,
	0x15, 0x46, 0x75, 0x73, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d,
	0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x14, 0x46, 0x75, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x61, 0x0a, 0x14, 0x46, 0x75, 0x73, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75,
	0x73, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x04, 0x4b, 0x69, 0x6c,
	0x6c, 0x12, 0x13, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x34, 0x5a, 0x32, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x66,
	0x6f, 0x72, 0x65, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_medifor_v1_fusion_proto_rawDescOnce sync.Once
	file_medifor_v1_fusion_proto_rawDescData = file_medifor_v1_fusion_proto_rawDesc
)

func file_medifor_v1_fusion_proto_rawDescGZIP() []byte {
	file_medifor_v1_fusion_proto_rawDescOnce.Do(func() {
		file_medifor_v1_fusion_proto_rawDescData = protoimpl.X.CompressGZIP(file_medifor_v1_fusion_proto_rawDescData)
	})
	return file_medifor_v1_fusion_proto_rawDescData
}

var file_medifor_v1_fusion_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_medifor_v1_fusion_proto_goTypes = []interface{}{
	(*Fusion)(nil),                       // 0: mediforproto.Fusion
	(*AnnotatedImageManipulation)(nil),   // 1: mediforproto.AnnotatedImageManipulation
	(*FuseImageManipulationRequest)(nil), // 2: mediforproto.FuseImageManipulationRequest
	(*AnnotatedVideoManipulation)(nil),   // 3: mediforproto.AnnotatedVideoManipulation
	(*FuseVideoManipulationRequest)(nil), // 4: mediforproto.FuseVideoManipulationRequest
	(*AnnotatedImageSplice)(nil),         // 5: mediforproto.AnnotatedImageSplice
	(*FuseImageSpliceRequest)(nil),       // 6: mediforproto.FuseImageSpliceRequest
	(*AnnotatedImageCameraMatch)(nil),    // 7: mediforproto.AnnotatedImageCameraMatch
	(*FuseImageCameraMatchRequest)(nil),  // 8: mediforproto.FuseImageCameraMatchRequest
	(*AnnotatedVideoCameraMatch)(nil),    // 9: mediforproto.AnnotatedVideoCameraMatch
	(*FuseVideoCameraMatchRequest)(nil),  // 10: mediforproto.FuseVideoCameraMatchRequest
	(*status.Status)(nil),                // 11: google.rpc.Status
	(*ImageManipulation)(nil),            // 12: mediforproto.ImageManipulation
	(*VideoManipulation)(nil),            // 13: mediforproto.VideoManipulation
	(*ImageSplice)(nil),                  // 14: mediforproto.ImageSplice
	(*ImageCameraMatch)(nil),             // 15: mediforproto.ImageCameraMatch
	(*ImageManipulationRequest)(nil),     // 16: mediforproto.ImageManipulationRequest
	(*VideoManipulationRequest)(nil),     // 17: mediforproto.VideoManipulationRequest
	(*ImageSpliceRequest)(nil),           // 18: mediforproto.ImageSpliceRequest
	(*ImageCameraMatchRequest)(nil),      // 19: mediforproto.ImageCameraMatchRequest
	(*VideoCameraMatch)(nil),             // 20: mediforproto.VideoCameraMatch
	(*VideoCameraMatchRequest)(nil),      // 21: mediforproto.VideoCameraMatchRequest
	(*Empty)(nil),                        // 22: mediforproto.Empty
}
var file_medifor_v1_fusion_proto_depIdxs = []int32{
	11, // 0: mediforproto.Fusion.status:type_name -> google.rpc.Status
	2,  // 1: mediforproto.Fusion.img_manip_req:type_name -> mediforproto.FuseImageManipulationRequest
	4,  // 2: mediforproto.Fusion.vid_manip_req:type_name -> mediforproto.FuseVideoManipulationRequest
	6,  // 3: mediforproto.Fusion.img_splice_req:type_name -> mediforproto.FuseImageSpliceRequest
	8,  // 4: mediforproto.Fusion.img_cam_match_req:type_name -> mediforproto.FuseImageCameraMatchRequest
	12, // 5: mediforproto.Fusion.img_manip:type_name -> mediforproto.ImageManipulation
	13, // 6: mediforproto.Fusion.vid_manip:type_name -> mediforproto.VideoManipulation
	14, // 7: mediforproto.Fusion.img_splice:type_name -> mediforproto.ImageSplice
	15, // 8: mediforproto.Fusion.img_cam_match:type_name -> mediforproto.ImageCameraMatch
	12, // 9: mediforproto.AnnotatedImageManipulation.data:type_name -> mediforproto.ImageManipulation
	16, // 10: mediforproto.FuseImageManipulationRequest.img_manip_req:type_name -> mediforproto.ImageManipulationRequest
	1,  // 11: mediforproto.FuseImageManipulationRequest.img_manip:type_name -> mediforproto.AnnotatedImageManipulation
	13, // 12: mediforproto.AnnotatedVideoManipulation.data:type_name -> mediforproto.VideoManipulation
	17, // 13: mediforproto.FuseVideoManipulationRequest.vid_manip_req:type_name -> mediforproto.VideoManipulationRequest
	3,  // 14: mediforproto.FuseVideoManipulationRequest.vid_manip:type_name -> mediforproto.AnnotatedVideoManipulation
	14, // 15: mediforproto.AnnotatedImageSplice.data:type_name -> mediforproto.ImageSplice
	18, // 16: mediforproto.FuseImageSpliceRequest.img_splice_req:type_name -> mediforproto.ImageSpliceRequest
	5,  // 17: mediforproto.FuseImageSpliceRequest.img_splice:type_name -> mediforproto.AnnotatedImageSplice
	15, // 18: mediforproto.AnnotatedImageCameraMatch.data:type_name -> mediforproto.ImageCameraMatch
	19, // 19: mediforproto.FuseImageCameraMatchRequest.img_cam_match_req:type_name -> mediforproto.ImageCameraMatchRequest
	7,  // 20: mediforproto.FuseImageCameraMatchRequest.img_cam_match:type_name -> mediforproto.AnnotatedImageCameraMatch
	20, // 21: mediforproto.AnnotatedVideoCameraMatch.data:type_name -> mediforproto.VideoCameraMatch
	21, // 22: mediforproto.FuseVideoCameraMatchRequest.vid_cam_match_req:type_name -> mediforproto.VideoCameraMatchRequest
	9,  // 23: mediforproto.FuseVideoCameraMatchRequest.vid_cam_match:type_name -> mediforproto.AnnotatedVideoCameraMatch
	2,  // 24: mediforproto.Fuser.FuseImageManipulation:input_type -> mediforproto.FuseImageManipulationRequest
	6,  // 25: mediforproto.Fuser.FuseImageSplice:input_type -> mediforproto.FuseImageSpliceRequest
	4,  // 26: mediforproto.Fuser.FuseVideoManipulation:input_type -> mediforproto.FuseVideoManipulationRequest
	8,  // 27: mediforproto.Fuser.FuseImageCameraMatch:input_type -> mediforproto.FuseImageCameraMatchRequest
	10, // 28: mediforproto.Fuser.FuseVideoCameraMatch:input_type -> mediforproto.FuseVideoCameraMatchRequest
	22, // 29: mediforproto.Fuser.Kill:input_type -> mediforproto.Empty
	12, // 30: mediforproto.Fuser.FuseImageManipulation:output_type -> mediforproto.ImageManipulation
	14, // 31: mediforproto.Fuser.FuseImageSplice:output_type -> mediforproto.ImageSplice
	13, // 32: mediforproto.Fuser.FuseVideoManipulation:output_type -> mediforproto.VideoManipulation
	15, // 33: mediforproto.Fuser.FuseImageCameraMatch:output_type -> mediforproto.ImageCameraMatch
	20, // 34: mediforproto.Fuser.FuseVideoCameraMatch:output_type -> mediforproto.VideoCameraMatch
	22, // 35: mediforproto.Fuser.Kill:output_type -> mediforproto.Empty
	30, // [30:36] is the sub-list for method output_type
	24, // [24:30] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_medifor_v1_fusion_proto_init() }
func file_medifor_v1_fusion_proto_init() {
	if File_medifor_v1_fusion_proto != nil {
		return
	}
	file_medifor_v1_analytic_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_medifor_v1_fusion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fusion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedImageManipulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseImageManipulationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedVideoManipulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseVideoManipulationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedImageSplice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseImageSpliceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedImageCameraMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseImageCameraMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedVideoCameraMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_fusion_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseVideoCameraMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_medifor_v1_fusion_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Fusion_ImgManipReq)(nil),
		(*Fusion_VidManipReq)(nil),
		(*Fusion_ImgSpliceReq)(nil),
		(*Fusion_ImgCamMatchReq)(nil),
		(*Fusion_ImgManip)(nil),
		(*Fusion_VidManip)(nil),
		(*Fusion_ImgSplice)(nil),
		(*Fusion_ImgCamMatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_medifor_v1_fusion_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_medifor_v1_fusion_proto_goTypes,
		DependencyIndexes: file_medifor_v1_fusion_proto_depIdxs,
		MessageInfos:      file_medifor_v1_fusion_proto_msgTypes,
	}.Build()
	File_medifor_v1_fusion_proto = out.File
	file_medifor_v1_fusion_proto_rawDesc = nil
	file_medifor_v1_fusion_proto_goTypes = nil
	file_medifor_v1_fusion_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FuserClient is the client API for Fuser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FuserClient interface {
	FuseImageManipulation(ctx context.Context, in *FuseImageManipulationRequest, opts ...grpc.CallOption) (*ImageManipulation, error)
	FuseImageSplice(ctx context.Context, in *FuseImageSpliceRequest, opts ...grpc.CallOption) (*ImageSplice, error)
	FuseVideoManipulation(ctx context.Context, in *FuseVideoManipulationRequest, opts ...grpc.CallOption) (*VideoManipulation, error)
	FuseImageCameraMatch(ctx context.Context, in *FuseImageCameraMatchRequest, opts ...grpc.CallOption) (*ImageCameraMatch, error)
	FuseVideoCameraMatch(ctx context.Context, in *FuseVideoCameraMatchRequest, opts ...grpc.CallOption) (*VideoCameraMatch, error)
	Kill(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type fuserClient struct {
	cc grpc.ClientConnInterface
}

func NewFuserClient(cc grpc.ClientConnInterface) FuserClient {
	return &fuserClient{cc}
}

func (c *fuserClient) FuseImageManipulation(ctx context.Context, in *FuseImageManipulationRequest, opts ...grpc.CallOption) (*ImageManipulation, error) {
	out := new(ImageManipulation)
	err := c.cc.Invoke(ctx, "/mediforproto.Fuser/FuseImageManipulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuserClient) FuseImageSplice(ctx context.Context, in *FuseImageSpliceRequest, opts ...grpc.CallOption) (*ImageSplice, error) {
	out := new(ImageSplice)
	err := c.cc.Invoke(ctx, "/mediforproto.Fuser/FuseImageSplice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuserClient) FuseVideoManipulation(ctx context.Context, in *FuseVideoManipulationRequest, opts ...grpc.CallOption) (*VideoManipulation, error) {
	out := new(VideoManipulation)
	err := c.cc.Invoke(ctx, "/mediforproto.Fuser/FuseVideoManipulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuserClient) FuseImageCameraMatch(ctx context.Context, in *FuseImageCameraMatchRequest, opts ...grpc.CallOption) (*ImageCameraMatch, error) {
	out := new(ImageCameraMatch)
	err := c.cc.Invoke(ctx, "/mediforproto.Fuser/FuseImageCameraMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuserClient) FuseVideoCameraMatch(ctx context.Context, in *FuseVideoCameraMatchRequest, opts ...grpc.CallOption) (*VideoCameraMatch, error) {
	out := new(VideoCameraMatch)
	err := c.cc.Invoke(ctx, "/mediforproto.Fuser/FuseVideoCameraMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuserClient) Kill(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mediforproto.Fuser/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuserServer is the server API for Fuser service.
type FuserServer interface {
	FuseImageManipulation(context.Context, *FuseImageManipulationRequest) (*ImageManipulation, error)
	FuseImageSplice(context.Context, *FuseImageSpliceRequest) (*ImageSplice, error)
	FuseVideoManipulation(context.Context, *FuseVideoManipulationRequest) (*VideoManipulation, error)
	FuseImageCameraMatch(context.Context, *FuseImageCameraMatchRequest) (*ImageCameraMatch, error)
	FuseVideoCameraMatch(context.Context, *FuseVideoCameraMatchRequest) (*VideoCameraMatch, error)
	Kill(context.Context, *Empty) (*Empty, error)
}

// UnimplementedFuserServer can be embedded to have forward compatible implementations.
type UnimplementedFuserServer struct {
}

func (*UnimplementedFuserServer) FuseImageManipulation(context.Context, *FuseImageManipulationRequest) (*ImageManipulation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method FuseImageManipulation not implemented")
}
func (*UnimplementedFuserServer) FuseImageSplice(context.Context, *FuseImageSpliceRequest) (*ImageSplice, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method FuseImageSplice not implemented")
}
func (*UnimplementedFuserServer) FuseVideoManipulation(context.Context, *FuseVideoManipulationRequest) (*VideoManipulation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method FuseVideoManipulation not implemented")
}
func (*UnimplementedFuserServer) FuseImageCameraMatch(context.Context, *FuseImageCameraMatchRequest) (*ImageCameraMatch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method FuseImageCameraMatch not implemented")
}
func (*UnimplementedFuserServer) FuseVideoCameraMatch(context.Context, *FuseVideoCameraMatchRequest) (*VideoCameraMatch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method FuseVideoCameraMatch not implemented")
}
func (*UnimplementedFuserServer) Kill(context.Context, *Empty) (*Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Kill not implemented")
}

func RegisterFuserServer(s *grpc.Server, srv FuserServer) {
	s.RegisterService(&_Fuser_serviceDesc, srv)
}

func _Fuser_FuseImageManipulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuseImageManipulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuserServer).FuseImageManipulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Fuser/FuseImageManipulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuserServer).FuseImageManipulation(ctx, req.(*FuseImageManipulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuser_FuseImageSplice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuseImageSpliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuserServer).FuseImageSplice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Fuser/FuseImageSplice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuserServer).FuseImageSplice(ctx, req.(*FuseImageSpliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuser_FuseVideoManipulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuseVideoManipulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuserServer).FuseVideoManipulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Fuser/FuseVideoManipulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuserServer).FuseVideoManipulation(ctx, req.(*FuseVideoManipulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuser_FuseImageCameraMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuseImageCameraMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuserServer).FuseImageCameraMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Fuser/FuseImageCameraMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuserServer).FuseImageCameraMatch(ctx, req.(*FuseImageCameraMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuser_FuseVideoCameraMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuseVideoCameraMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuserServer).FuseVideoCameraMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Fuser/FuseVideoCameraMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuserServer).FuseVideoCameraMatch(ctx, req.(*FuseVideoCameraMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuser_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuserServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Fuser/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuserServer).Kill(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fuser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mediforproto.Fuser",
	HandlerType: (*FuserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FuseImageManipulation",
			Handler:    _Fuser_FuseImageManipulation_Handler,
		},
		{
			MethodName: "FuseImageSplice",
			Handler:    _Fuser_FuseImageSplice_Handler,
		},
		{
			MethodName: "FuseVideoManipulation",
			Handler:    _Fuser_FuseVideoManipulation_Handler,
		},
		{
			MethodName: "FuseImageCameraMatch",
			Handler:    _Fuser_FuseImageCameraMatch_Handler,
		},
		{
			MethodName: "FuseVideoCameraMatch",
			Handler:    _Fuser_FuseVideoCameraMatch_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Fuser_Kill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medifor/v1/fusion.proto",
}
