// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medifor/v1/provenance.proto

package mediforproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LinkType int32

const (
	LinkType_SPLICE     LinkType = 0
	LinkType_PROVENANCE LinkType = 1
	LinkType_SPEAKER    LinkType = 2
	LinkType_CAMERA     LinkType = 3
	LinkType_LOCATION   LinkType = 4
)

var LinkType_name = map[int32]string{
	0: "SPLICE",
	1: "PROVENANCE",
	2: "SPEAKER",
	3: "CAMERA",
	4: "LOCATION",
}

var LinkType_value = map[string]int32{
	"SPLICE":     0,
	"PROVENANCE": 1,
	"SPEAKER":    2,
	"CAMERA":     3,
	"LOCATION":   4,
}

func (x LinkType) String() string {
	return proto.EnumName(LinkType_name, int32(x))
}

func (LinkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77e2b3056807758b, []int{0}
}

// FilterRequest is used to ask a provenance analytic to return the
// top N matches for a given image.
type ProvenanceFilteringRequest struct {
	// Unique identifier for the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The image to be sent to the provenance analytic.
	Image *Resource `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// The number of results to return
	ResultLimit          int32    `protobuf:"varint,3,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvenanceFilteringRequest) Reset()         { *m = ProvenanceFilteringRequest{} }
func (m *ProvenanceFilteringRequest) String() string { return proto.CompactTextString(m) }
func (*ProvenanceFilteringRequest) ProtoMessage()    {}
func (*ProvenanceFilteringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77e2b3056807758b, []int{0}
}

func (m *ProvenanceFilteringRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvenanceFilteringRequest.Unmarshal(m, b)
}
func (m *ProvenanceFilteringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvenanceFilteringRequest.Marshal(b, m, deterministic)
}
func (m *ProvenanceFilteringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvenanceFilteringRequest.Merge(m, src)
}
func (m *ProvenanceFilteringRequest) XXX_Size() int {
	return xxx_messageInfo_ProvenanceFilteringRequest.Size(m)
}
func (m *ProvenanceFilteringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvenanceFilteringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProvenanceFilteringRequest proto.InternalMessageInfo

func (m *ProvenanceFilteringRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ProvenanceFilteringRequest) GetImage() *Resource {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ProvenanceFilteringRequest) GetResultLimit() int32 {
	if m != nil {
		return m.ResultLimit
	}
	return 0
}

// ImageMatch contains the image identifier and score denoting how
// closely it matches the probe image.
type ImageMatch struct {
	// Unique identifier for the image.
	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// The image resource.
	MatchingImage *Resource `protobuf:"bytes,2,opt,name=matching_image,json=matchingImage,proto3" json:"matching_image,omitempty"`
	// The score for the matching image.
	Score                float32  `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageMatch) Reset()         { *m = ImageMatch{} }
func (m *ImageMatch) String() string { return proto.CompactTextString(m) }
func (*ImageMatch) ProtoMessage()    {}
func (*ImageMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_77e2b3056807758b, []int{1}
}

func (m *ImageMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageMatch.Unmarshal(m, b)
}
func (m *ImageMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageMatch.Marshal(b, m, deterministic)
}
func (m *ImageMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageMatch.Merge(m, src)
}
func (m *ImageMatch) XXX_Size() int {
	return xxx_messageInfo_ImageMatch.Size(m)
}
func (m *ImageMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageMatch.DiscardUnknown(m)
}

var xxx_messageInfo_ImageMatch proto.InternalMessageInfo

func (m *ImageMatch) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ImageMatch) GetMatchingImage() *Resource {
	if m != nil {
		return m.MatchingImage
	}
	return nil
}

func (m *ImageMatch) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// ImageFilter contains the top N results that match the probe image
// along with the corresponding scores.
type FilteringResult struct {
	// List of matching images with scores.  The length of the list
	// is determined by the result_limit provided in the request.
	Matches []*ImageMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	// Probe image sent for the filter request, reference (Optional)/
	Probe                *Resource `protobuf:"bytes,2,opt,name=probe,proto3" json:"probe,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FilteringResult) Reset()         { *m = FilteringResult{} }
func (m *FilteringResult) String() string { return proto.CompactTextString(m) }
func (*FilteringResult) ProtoMessage()    {}
func (*FilteringResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_77e2b3056807758b, []int{2}
}

func (m *FilteringResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilteringResult.Unmarshal(m, b)
}
func (m *FilteringResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilteringResult.Marshal(b, m, deterministic)
}
func (m *FilteringResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilteringResult.Merge(m, src)
}
func (m *FilteringResult) XXX_Size() int {
	return xxx_messageInfo_FilteringResult.Size(m)
}
func (m *FilteringResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FilteringResult.DiscardUnknown(m)
}

var xxx_messageInfo_FilteringResult proto.InternalMessageInfo

func (m *FilteringResult) GetMatches() []*ImageMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *FilteringResult) GetProbe() *Resource {
	if m != nil {
		return m.Probe
	}
	return nil
}

// ProvenanceGraphRequest provides a provenance analytic with a probe image
// and the results of the filtering task to the analytic.
type ProvenanceGraphRequest struct {
	// Unique identifier for the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The image to be sent to the provenance analytic.
	Image *Resource `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Image matches from the provenance filtering task
	FilterResults        []*ImageMatch `protobuf:"bytes,3,rep,name=filter_results,json=filterResults,proto3" json:"filter_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ProvenanceGraphRequest) Reset()         { *m = ProvenanceGraphRequest{} }
func (m *ProvenanceGraphRequest) String() string { return proto.CompactTextString(m) }
func (*ProvenanceGraphRequest) ProtoMessage()    {}
func (*ProvenanceGraphRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77e2b3056807758b, []int{3}
}

func (m *ProvenanceGraphRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvenanceGraphRequest.Unmarshal(m, b)
}
func (m *ProvenanceGraphRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvenanceGraphRequest.Marshal(b, m, deterministic)
}
func (m *ProvenanceGraphRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvenanceGraphRequest.Merge(m, src)
}
func (m *ProvenanceGraphRequest) XXX_Size() int {
	return xxx_messageInfo_ProvenanceGraphRequest.Size(m)
}
func (m *ProvenanceGraphRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvenanceGraphRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProvenanceGraphRequest proto.InternalMessageInfo

func (m *ProvenanceGraphRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ProvenanceGraphRequest) GetImage() *Resource {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ProvenanceGraphRequest) GetFilterResults() []*ImageMatch {
	if m != nil {
		return m.FilterResults
	}
	return nil
}

// Association provides details describing the relationship between two probes.
type Association struct {
	// The specific tyle of link created
	Type LinkType `protobuf:"varint,1,opt,name=type,proto3,enum=mediforproto.LinkType" json:"type,omitempty"`
	// UUID of the probe image
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// UUID of the matching image
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// Real number that is higher if the association exists.
	Score float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
	// Explanation of the association and supporting evidence.
	Explanation          string   `protobuf:"bytes,5,opt,name=explanation,proto3" json:"explanation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Association) Reset()         { *m = Association{} }
func (m *Association) String() string { return proto.CompactTextString(m) }
func (*Association) ProtoMessage()    {}
func (*Association) Descriptor() ([]byte, []int) {
	return fileDescriptor_77e2b3056807758b, []int{4}
}

func (m *Association) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Association.Unmarshal(m, b)
}
func (m *Association) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Association.Marshal(b, m, deterministic)
}
func (m *Association) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Association.Merge(m, src)
}
func (m *Association) XXX_Size() int {
	return xxx_messageInfo_Association.Size(m)
}
func (m *Association) XXX_DiscardUnknown() {
	xxx_messageInfo_Association.DiscardUnknown(m)
}

var xxx_messageInfo_Association proto.InternalMessageInfo

func (m *Association) GetType() LinkType {
	if m != nil {
		return m.Type
	}
	return LinkType_SPLICE
}

func (m *Association) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Association) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Association) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Association) GetExplanation() string {
	if m != nil {
		return m.Explanation
	}
	return ""
}

// Association provides details describing the relationship between two probes.
type Node struct {
	// UUID of the image
	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// Real number that is higher if an image is in the graph
	Score                float32  `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_77e2b3056807758b, []int{5}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *Node) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// ProvenanceGraph
type ProvenanceGraph struct {
	// List of nodes in the graph.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// List of associations that specify the relationship between nodes on the gra
	Associations []*Association `protobuf:"bytes,2,rep,name=associations,proto3" json:"associations,omitempty"`
	// Whether the algorithm opted out of the task
	OptOut               bool     `protobuf:"varint,3,opt,name=opt_out,json=optOut,proto3" json:"opt_out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvenanceGraph) Reset()         { *m = ProvenanceGraph{} }
func (m *ProvenanceGraph) String() string { return proto.CompactTextString(m) }
func (*ProvenanceGraph) ProtoMessage()    {}
func (*ProvenanceGraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_77e2b3056807758b, []int{6}
}

func (m *ProvenanceGraph) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvenanceGraph.Unmarshal(m, b)
}
func (m *ProvenanceGraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvenanceGraph.Marshal(b, m, deterministic)
}
func (m *ProvenanceGraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvenanceGraph.Merge(m, src)
}
func (m *ProvenanceGraph) XXX_Size() int {
	return xxx_messageInfo_ProvenanceGraph.Size(m)
}
func (m *ProvenanceGraph) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvenanceGraph.DiscardUnknown(m)
}

var xxx_messageInfo_ProvenanceGraph proto.InternalMessageInfo

func (m *ProvenanceGraph) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ProvenanceGraph) GetAssociations() []*Association {
	if m != nil {
		return m.Associations
	}
	return nil
}

func (m *ProvenanceGraph) GetOptOut() bool {
	if m != nil {
		return m.OptOut
	}
	return false
}

func init() {
	proto.RegisterEnum("mediforproto.LinkType", LinkType_name, LinkType_value)
	proto.RegisterType((*ProvenanceFilteringRequest)(nil), "mediforproto.ProvenanceFilteringRequest")
	proto.RegisterType((*ImageMatch)(nil), "mediforproto.ImageMatch")
	proto.RegisterType((*FilteringResult)(nil), "mediforproto.FilteringResult")
	proto.RegisterType((*ProvenanceGraphRequest)(nil), "mediforproto.ProvenanceGraphRequest")
	proto.RegisterType((*Association)(nil), "mediforproto.Association")
	proto.RegisterType((*Node)(nil), "mediforproto.Node")
	proto.RegisterType((*ProvenanceGraph)(nil), "mediforproto.ProvenanceGraph")
}

func init() { proto.RegisterFile("medifor/v1/provenance.proto", fileDescriptor_77e2b3056807758b) }

var fileDescriptor_77e2b3056807758b = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x71, 0xbe, 0x33, 0x4e, 0xd3, 0x68, 0x41, 0xad, 0x5b, 0x54, 0x29, 0x58, 0x1c, 0xac,
	0x82, 0x5a, 0x11, 0x0e, 0x9c, 0x2a, 0xe4, 0x46, 0x06, 0x45, 0xa4, 0x49, 0xb4, 0xad, 0x38, 0x36,
	0x72, 0xed, 0x6d, 0xba, 0xc2, 0xf6, 0x9a, 0xf5, 0xba, 0xa2, 0x12, 0x8f, 0xc0, 0x8d, 0x27, 0xe0,
	0xc2, 0xd3, 0xf0, 0x50, 0xc8, 0xbb, 0x69, 0xfd, 0x21, 0x4a, 0xb9, 0x70, 0xcb, 0x4c, 0x7e, 0xb3,
	0xf3, 0x9f, 0xff, 0xac, 0x17, 0x9e, 0x86, 0xc4, 0xa7, 0x97, 0x8c, 0x1f, 0x5e, 0xbf, 0x3a, 0x8c,
	0x39, 0xbb, 0x26, 0x91, 0x1b, 0x79, 0xe4, 0x20, 0xe6, 0x4c, 0x30, 0xd4, 0x5b, 0xff, 0x29, 0xa3,
	0xdd, 0x9d, 0x02, 0xea, 0x46, 0x6e, 0x70, 0x23, 0xa8, 0xa7, 0x40, 0xf3, 0x9b, 0x06, 0xbb, 0x8b,
	0xbb, 0xea, 0x77, 0x34, 0x10, 0x84, 0xd3, 0x68, 0x85, 0xc9, 0xe7, 0x94, 0x24, 0x02, 0xed, 0x01,
	0x70, 0xf5, 0x73, 0x49, 0x7d, 0x43, 0x1b, 0x6a, 0x56, 0x17, 0x77, 0xd7, 0x99, 0x89, 0x8f, 0x5e,
	0x42, 0x93, 0x86, 0xee, 0x8a, 0x18, 0xb5, 0xa1, 0x66, 0xe9, 0xa3, 0xad, 0x83, 0x62, 0xdb, 0x03,
	0x4c, 0x12, 0x96, 0x72, 0x8f, 0x60, 0x05, 0xa1, 0x67, 0xd0, 0xe3, 0x24, 0x49, 0x03, 0xb1, 0x0c,
	0x68, 0x48, 0x85, 0x51, 0x1f, 0x6a, 0x56, 0x13, 0xeb, 0x2a, 0x37, 0xcd, 0x52, 0xe6, 0x57, 0x80,
	0x49, 0xc6, 0x9e, 0xb8, 0xc2, 0xbb, 0x42, 0x3b, 0xd0, 0x91, 0x95, 0x79, 0xef, 0xb6, 0x8c, 0x27,
	0x3e, 0x3a, 0x82, 0x7e, 0x98, 0x31, 0x34, 0x5a, 0x2d, 0xff, 0x45, 0xc2, 0xc6, 0x2d, 0x2d, 0x8f,
	0x47, 0x4f, 0xa0, 0x99, 0x78, 0x8c, 0x13, 0xa9, 0xa1, 0x86, 0x55, 0x60, 0x26, 0xb0, 0x59, 0x70,
	0x20, 0x53, 0x85, 0x46, 0xd0, 0x96, 0x95, 0x24, 0x31, 0xb4, 0x61, 0xdd, 0xd2, 0x47, 0x46, 0xb9,
	0x41, 0xae, 0x16, 0xdf, 0x82, 0x99, 0x2b, 0x31, 0x67, 0x17, 0x0f, 0xba, 0x22, 0x21, 0xf3, 0xa7,
	0x06, 0x5b, 0xf9, 0x06, 0xde, 0x73, 0x37, 0xbe, 0xfa, 0x2f, 0xee, 0xbf, 0x85, 0xfe, 0xa5, 0x1c,
	0x6e, 0xa9, 0x0c, 0x4f, 0x8c, 0xfa, 0x03, 0x03, 0x6d, 0x28, 0x5e, 0x39, 0x91, 0x98, 0x3f, 0x34,
	0xd0, 0xed, 0x24, 0x61, 0x1e, 0x75, 0x05, 0x65, 0x11, 0xda, 0x87, 0x86, 0xb8, 0x89, 0x89, 0xd4,
	0xd5, 0xaf, 0x76, 0x9f, 0xd2, 0xe8, 0xd3, 0xd9, 0x4d, 0x4c, 0xb0, 0x64, 0xd0, 0x16, 0xb4, 0x94,
	0x1a, 0xa9, 0xb5, 0x8b, 0xd7, 0x51, 0x96, 0x17, 0x2e, 0x5f, 0x11, 0x75, 0x19, 0xba, 0x78, 0x1d,
	0xe5, 0xfb, 0x69, 0x14, 0xf6, 0x83, 0x86, 0xa0, 0x93, 0x2f, 0x71, 0xe0, 0x46, 0x52, 0x80, 0xd1,
	0x94, 0x25, 0xc5, 0x94, 0xf9, 0x06, 0x1a, 0x33, 0xe6, 0x93, 0xbf, 0xdd, 0x9c, 0xbb, 0xa3, 0x6b,
	0xc5, 0xd5, 0x7f, 0xd7, 0x60, 0xb3, 0xb2, 0x05, 0x64, 0x41, 0x33, 0x62, 0xfe, 0xdd, 0xe6, 0x51,
	0x79, 0xc2, 0xac, 0x0f, 0x56, 0x00, 0x3a, 0x82, 0x9e, 0x9b, 0x3b, 0x93, 0x18, 0x35, 0x59, 0xb0,
	0x53, 0x2e, 0x28, 0x78, 0x87, 0x4b, 0x38, 0xda, 0x86, 0x36, 0x8b, 0xc5, 0x92, 0xa5, 0xca, 0x86,
	0x0e, 0x6e, 0xb1, 0x58, 0xcc, 0x53, 0xb1, 0x7f, 0x02, 0x9d, 0x5b, 0x23, 0x11, 0x40, 0xeb, 0x74,
	0x31, 0x9d, 0x8c, 0x9d, 0xc1, 0x23, 0xd4, 0x07, 0x58, 0xe0, 0xf9, 0x47, 0x67, 0x66, 0xcf, 0xc6,
	0xce, 0x40, 0x43, 0x3a, 0xb4, 0x4f, 0x17, 0x8e, 0xfd, 0xc1, 0xc1, 0x83, 0x5a, 0x06, 0x8e, 0xed,
	0x13, 0x07, 0xdb, 0x83, 0x3a, 0xea, 0x41, 0x67, 0x3a, 0x1f, 0xdb, 0x67, 0x93, 0xf9, 0x6c, 0xd0,
	0x18, 0xfd, 0xd2, 0x00, 0xf2, 0x21, 0xd1, 0x39, 0x3c, 0xfe, 0xc3, 0xa7, 0x8f, 0xac, 0xb2, 0xec,
	0xfb, 0x5f, 0x87, 0xdd, 0xbd, 0x32, 0x59, 0xfd, 0x76, 0xce, 0x61, 0xbb, 0x62, 0xe9, 0x71, 0x4a,
	0x03, 0x3f, 0xeb, 0xf1, 0xfc, 0xbe, 0x1e, 0xc5, 0xfb, 0x5f, 0x3d, 0xbf, 0x7a, 0xd8, 0x0b, 0x30,
	0x3c, 0x16, 0x16, 0x98, 0x15, 0x77, 0x43, 0xf5, 0xae, 0x1d, 0x17, 0x96, 0xb9, 0xc8, 0x12, 0x17,
	0x2d, 0x99, 0x7f, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xfb, 0x98, 0xff, 0x37, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProvenanceClient is the client API for Provenance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProvenanceClient interface {
	ProvenanceFiltering(ctx context.Context, in *ProvenanceFilteringRequest, opts ...grpc.CallOption) (*FilteringResult, error)
	ProvenanceGraphBuilding(ctx context.Context, in *ProvenanceGraphRequest, opts ...grpc.CallOption) (*ProvenanceGraph, error)
}

type provenanceClient struct {
	cc *grpc.ClientConn
}

func NewProvenanceClient(cc *grpc.ClientConn) ProvenanceClient {
	return &provenanceClient{cc}
}

func (c *provenanceClient) ProvenanceFiltering(ctx context.Context, in *ProvenanceFilteringRequest, opts ...grpc.CallOption) (*FilteringResult, error) {
	out := new(FilteringResult)
	err := c.cc.Invoke(ctx, "/mediforproto.Provenance/ProvenanceFiltering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provenanceClient) ProvenanceGraphBuilding(ctx context.Context, in *ProvenanceGraphRequest, opts ...grpc.CallOption) (*ProvenanceGraph, error) {
	out := new(ProvenanceGraph)
	err := c.cc.Invoke(ctx, "/mediforproto.Provenance/ProvenanceGraphBuilding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvenanceServer is the server API for Provenance service.
type ProvenanceServer interface {
	ProvenanceFiltering(context.Context, *ProvenanceFilteringRequest) (*FilteringResult, error)
	ProvenanceGraphBuilding(context.Context, *ProvenanceGraphRequest) (*ProvenanceGraph, error)
}

func RegisterProvenanceServer(s *grpc.Server, srv ProvenanceServer) {
	s.RegisterService(&_Provenance_serviceDesc, srv)
}

func _Provenance_ProvenanceFiltering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvenanceFilteringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvenanceServer).ProvenanceFiltering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Provenance/ProvenanceFiltering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvenanceServer).ProvenanceFiltering(ctx, req.(*ProvenanceFilteringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provenance_ProvenanceGraphBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvenanceGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvenanceServer).ProvenanceGraphBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Provenance/ProvenanceGraphBuilding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvenanceServer).ProvenanceGraphBuilding(ctx, req.(*ProvenanceGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provenance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mediforproto.Provenance",
	HandlerType: (*ProvenanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvenanceFiltering",
			Handler:    _Provenance_ProvenanceFiltering_Handler,
		},
		{
			MethodName: "ProvenanceGraphBuilding",
			Handler:    _Provenance_ProvenanceGraphBuilding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medifor/v1/provenance.proto",
}
