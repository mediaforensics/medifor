// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medifor/v1/kill.proto

package mediforproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("medifor/v1/kill.proto", fileDescriptor_d8c4e3e1b4a500bc) }

var fileDescriptor_d8c4e3e1b4a500bc = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0x4d, 0x4d, 0xc9,
	0x4c, 0xcb, 0x2f, 0xd2, 0x2f, 0x33, 0xd4, 0xcf, 0xce, 0xcc, 0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x81, 0x0a, 0x83, 0x79, 0x52, 0xe2, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa,
	0x45, 0x05, 0xc9, 0xfa, 0xc5, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0x10, 0x65, 0x52, 0x92, 0x48, 0xba,
	0x13, 0xf3, 0x12, 0x73, 0x2a, 0x4b, 0x32, 0x93, 0x21, 0x52, 0x46, 0x36, 0x5c, 0x1c, 0xde, 0x99,
	0x39, 0x39, 0x89, 0x49, 0x39, 0xa9, 0x42, 0x06, 0x5c, 0x2c, 0x20, 0xb6, 0x90, 0xb0, 0x1e, 0xb2,
	0xb1, 0x7a, 0xae, 0xb9, 0x05, 0x25, 0x95, 0x52, 0xd8, 0x04, 0x9d, 0x54, 0xb9, 0x24, 0x92, 0xf3,
	0x73, 0x91, 0x64, 0xd2, 0x8b, 0x12, 0x73, 0x21, 0x26, 0x3b, 0x71, 0x82, 0xcc, 0x0a, 0x00, 0x31,
	0x93, 0xd8, 0xc0, 0x22, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0x9a, 0x56, 0x62, 0xc6,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KillableClient is the client API for Killable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KillableClient interface {
	Kill(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type killableClient struct {
	cc *grpc.ClientConn
}

func NewKillableClient(cc *grpc.ClientConn) KillableClient {
	return &killableClient{cc}
}

func (c *killableClient) Kill(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mediforproto.Killable/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KillableServer is the server API for Killable service.
type KillableServer interface {
	Kill(context.Context, *Empty) (*Empty, error)
}

func RegisterKillableServer(s *grpc.Server, srv KillableServer) {
	s.RegisterService(&_Killable_serviceDesc, srv)
}

func _Killable_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KillableServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Killable/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KillableServer).Kill(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Killable_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mediforproto.Killable",
	HandlerType: (*KillableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kill",
			Handler:    _Killable_Kill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medifor/v1/kill.proto",
}
