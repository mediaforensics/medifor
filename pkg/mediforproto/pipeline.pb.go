// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: medifor/v1/pipeline.proto

package mediforproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DetectionStage int32

const (
	DetectionStage_DETECTION_STAGE_NONE     DetectionStage = 0
	DetectionStage_DETECTION_STAGE_QUEUED   DetectionStage = 1
	DetectionStage_DETECTION_STAGE_CLAIMED  DetectionStage = 2
	DetectionStage_DETECTION_STAGE_FINISHED DetectionStage = 3
)

// Enum value maps for DetectionStage.
var (
	DetectionStage_name = map[int32]string{
		0: "DETECTION_STAGE_NONE",
		1: "DETECTION_STAGE_QUEUED",
		2: "DETECTION_STAGE_CLAIMED",
		3: "DETECTION_STAGE_FINISHED",
	}
	DetectionStage_value = map[string]int32{
		"DETECTION_STAGE_NONE":     0,
		"DETECTION_STAGE_QUEUED":   1,
		"DETECTION_STAGE_CLAIMED":  2,
		"DETECTION_STAGE_FINISHED": 3,
	}
)

func (x DetectionStage) Enum() *DetectionStage {
	p := new(DetectionStage)
	*p = x
	return p
}

func (x DetectionStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectionStage) Descriptor() protoreflect.EnumDescriptor {
	return file_medifor_v1_pipeline_proto_enumTypes[0].Descriptor()
}

func (DetectionStage) Type() protoreflect.EnumType {
	return &file_medifor_v1_pipeline_proto_enumTypes[0]
}

func (x DetectionStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectionStage.Descriptor instead.
func (DetectionStage) EnumDescriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{0}
}

type DetectionStatus int32

const (
	DetectionStatus_DETECTION_STATUS_NONE    DetectionStatus = 0
	DetectionStatus_DETECTION_STATUS_SUCCESS DetectionStatus = 1
	DetectionStatus_DETECTION_STATUS_FAILURE DetectionStatus = 2
)

// Enum value maps for DetectionStatus.
var (
	DetectionStatus_name = map[int32]string{
		0: "DETECTION_STATUS_NONE",
		1: "DETECTION_STATUS_SUCCESS",
		2: "DETECTION_STATUS_FAILURE",
	}
	DetectionStatus_value = map[string]int32{
		"DETECTION_STATUS_NONE":    0,
		"DETECTION_STATUS_SUCCESS": 1,
		"DETECTION_STATUS_FAILURE": 2,
	}
)

func (x DetectionStatus) Enum() *DetectionStatus {
	p := new(DetectionStatus)
	*p = x
	return p
}

func (x DetectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_medifor_v1_pipeline_proto_enumTypes[1].Descriptor()
}

func (DetectionStatus) Type() protoreflect.EnumType {
	return &file_medifor_v1_pipeline_proto_enumTypes[1]
}

func (x DetectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectionStatus.Descriptor instead.
func (DetectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{1}
}

type SortKey int32

const (
	SortKey_SCORE      SortKey = 0
	SortKey_META       SortKey = 1
	SortKey_META_QUERY SortKey = 2
)

// Enum value maps for SortKey.
var (
	SortKey_name = map[int32]string{
		0: "SCORE",
		1: "META",
		2: "META_QUERY",
	}
	SortKey_value = map[string]int32{
		"SCORE":      0,
		"META":       1,
		"META_QUERY": 2,
	}
)

func (x SortKey) Enum() *SortKey {
	p := new(SortKey)
	*p = x
	return p
}

func (x SortKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortKey) Descriptor() protoreflect.EnumDescriptor {
	return file_medifor_v1_pipeline_proto_enumTypes[2].Descriptor()
}

func (SortKey) Type() protoreflect.EnumType {
	return &file_medifor_v1_pipeline_proto_enumTypes[2]
}

func (x SortKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortKey.Descriptor instead.
func (SortKey) EnumDescriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{2}
}

type FusionThresholdType int32

const (
	FusionThresholdType_FUSION_NO_THRESHOLD FusionThresholdType = 0
	FusionThresholdType_FUSION_LT_THRESHOLD FusionThresholdType = 1
	FusionThresholdType_FUSION_GT_THRESHOLD FusionThresholdType = 2
)

// Enum value maps for FusionThresholdType.
var (
	FusionThresholdType_name = map[int32]string{
		0: "FUSION_NO_THRESHOLD",
		1: "FUSION_LT_THRESHOLD",
		2: "FUSION_GT_THRESHOLD",
	}
	FusionThresholdType_value = map[string]int32{
		"FUSION_NO_THRESHOLD": 0,
		"FUSION_LT_THRESHOLD": 1,
		"FUSION_GT_THRESHOLD": 2,
	}
)

func (x FusionThresholdType) Enum() *FusionThresholdType {
	p := new(FusionThresholdType)
	*p = x
	return p
}

func (x FusionThresholdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FusionThresholdType) Descriptor() protoreflect.EnumDescriptor {
	return file_medifor_v1_pipeline_proto_enumTypes[3].Descriptor()
}

func (FusionThresholdType) Type() protoreflect.EnumType {
	return &file_medifor_v1_pipeline_proto_enumTypes[3]
}

func (x FusionThresholdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FusionThresholdType.Descriptor instead.
func (FusionThresholdType) EnumDescriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{3}
}

type MediaType int32

const (
	MediaType_IMAGE        MediaType = 0
	MediaType_VIDEO        MediaType = 1
	MediaType_FUSION_IMAGE MediaType = 2
	MediaType_FUSION_VIDEO MediaType = 3
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "IMAGE",
		1: "VIDEO",
		2: "FUSION_IMAGE",
		3: "FUSION_VIDEO",
	}
	MediaType_value = map[string]int32{
		"IMAGE":        0,
		"VIDEO":        1,
		"FUSION_IMAGE": 2,
		"FUSION_VIDEO": 3,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_medifor_v1_pipeline_proto_enumTypes[4].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_medifor_v1_pipeline_proto_enumTypes[4]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{4}
}

type DetectionListVerbosity int32

const (
	DetectionListVerbosity_DETECTION_VERBOSITY_FULL    DetectionListVerbosity = 0
	DetectionListVerbosity_DETECTION_VERBOSITY_MINIMAL DetectionListVerbosity = 1
)

// Enum value maps for DetectionListVerbosity.
var (
	DetectionListVerbosity_name = map[int32]string{
		0: "DETECTION_VERBOSITY_FULL",
		1: "DETECTION_VERBOSITY_MINIMAL",
	}
	DetectionListVerbosity_value = map[string]int32{
		"DETECTION_VERBOSITY_FULL":    0,
		"DETECTION_VERBOSITY_MINIMAL": 1,
	}
)

func (x DetectionListVerbosity) Enum() *DetectionListVerbosity {
	p := new(DetectionListVerbosity)
	*p = x
	return p
}

func (x DetectionListVerbosity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectionListVerbosity) Descriptor() protoreflect.EnumDescriptor {
	return file_medifor_v1_pipeline_proto_enumTypes[5].Descriptor()
}

func (DetectionListVerbosity) Type() protoreflect.EnumType {
	return &file_medifor_v1_pipeline_proto_enumTypes[5]
}

func (x DetectionListVerbosity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectionListVerbosity.Descriptor instead.
func (DetectionListVerbosity) EnumDescriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{5}
}

// SortCol identifies the column to sort by and whether to sort in ascending order
// Next tag: 6
type SortCol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column to sort on
	Key SortKey `protobuf:"varint,1,opt,name=key,proto3,enum=mediforproto.SortKey" json:"key,omitempty"`
	// Bool for sorting in ascending order (if false sorts in descending order)
	IsAsc bool `protobuf:"varint,2,opt,name=is_asc,json=isAsc,proto3" json:"is_asc,omitempty"`
	// What type to cast the key into if necessary
	TypeCast string `protobuf:"bytes,3,opt,name=type_cast,json=typeCast,proto3" json:"type_cast,omitempty"`
	// Metadata key to sort by if using metadata
	MetaKey string `protobuf:"bytes,4,opt,name=meta_key,json=metaKey,proto3" json:"meta_key,omitempty"`
}

func (x *SortCol) Reset() {
	*x = SortCol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortCol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortCol) ProtoMessage() {}

func (x *SortCol) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortCol.ProtoReflect.Descriptor instead.
func (*SortCol) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *SortCol) GetKey() SortKey {
	if x != nil {
		return x.Key
	}
	return SortKey_SCORE
}

func (x *SortCol) GetIsAsc() bool {
	if x != nil {
		return x.IsAsc
	}
	return false
}

func (x *SortCol) GetTypeCast() string {
	if x != nil {
		return x.TypeCast
	}
	return ""
}

func (x *SortCol) GetMetaKey() string {
	if x != nil {
		return x.MetaKey
	}
	return ""
}

// DetectionRequest contains a MediFor detection object as well as a list of
// analytic ids and fusion ids. TODO: if none specified, default to all?
// Next Tag: 9
type DetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional ID for this detection. If not provided, one will be assigned.
	// Must be unique from any other provided ID: a collision will prevent
	// this request from being fulfilled.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// A Detection proto with just the important request parts filled out.
	Request *Detection `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// The analytics to run.
	AnalyticId []string `protobuf:"bytes,2,rep,name=analytic_id,json=analyticId,proto3" json:"analytic_id,omitempty"`
	// Fusers to run automatically when all analytics are done.
	FuserId []string `protobuf:"bytes,8,rep,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	// Tags to apply to this detection. When in doubt, use user_tags instead.
	Tags map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// User tags to apply to this detection. When in doubt, use this one.
	UserTags map[string]string `protobuf:"bytes,6,rep,name=user_tags,json=userTags,proto3" json:"user_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Metadata table as needed. Pass-through.
	Meta map[string]string `protobuf:"bytes,7,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timeout in seconds after which an analytic worker will die waiting for the
	// analytic to respond. Default is "no timeout" (0 seconds).
	AnalyticTimeoutSec int64 `protobuf:"varint,5,opt,name=analytic_timeout_sec,json=analyticTimeoutSec,proto3" json:"analytic_timeout_sec,omitempty"`
}

func (x *DetectionRequest) Reset() {
	*x = DetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionRequest) ProtoMessage() {}

func (x *DetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionRequest.ProtoReflect.Descriptor instead.
func (*DetectionRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *DetectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetectionRequest) GetRequest() *Detection {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DetectionRequest) GetAnalyticId() []string {
	if x != nil {
		return x.AnalyticId
	}
	return nil
}

func (x *DetectionRequest) GetFuserId() []string {
	if x != nil {
		return x.FuserId
	}
	return nil
}

func (x *DetectionRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DetectionRequest) GetUserTags() map[string]string {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *DetectionRequest) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DetectionRequest) GetAnalyticTimeoutSec() int64 {
	if x != nil {
		return x.AnalyticTimeoutSec
	}
	return 0
}

// AnalyticDetectionInfo provides details on the status of a detection being
// performed by a given analytic.
// Next ID: 5
type AnalyticDetectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The analytic that produced this result.
	AnalyticId string `protobuf:"bytes,1,opt,name=analytic_id,json=analyticId,proto3" json:"analytic_id,omitempty"`
	// Current processing stage for the entire detection event (all analytics) if
	// in progress, or PT_STAGE_FINISHED if completed. When complete, the status
	// field will have a non-default value.
	Stage DetectionStage `protobuf:"varint,2,opt,name=stage,proto3,enum=mediforproto.DetectionStage" json:"stage,omitempty"`
	// Final status when we are in PT_STAGE_FINISHED.
	Status DetectionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=mediforproto.DetectionStatus" json:"status,omitempty"`
	// The Detection with the result and status filled out (and the request).
	// If the response and status are empty (default), then it is not finished.
	Detection *Detection `protobuf:"bytes,4,opt,name=detection,proto3" json:"detection,omitempty"`
}

func (x *AnalyticDetectionInfo) Reset() {
	*x = AnalyticDetectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticDetectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticDetectionInfo) ProtoMessage() {}

func (x *AnalyticDetectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticDetectionInfo.ProtoReflect.Descriptor instead.
func (*AnalyticDetectionInfo) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyticDetectionInfo) GetAnalyticId() string {
	if x != nil {
		return x.AnalyticId
	}
	return ""
}

func (x *AnalyticDetectionInfo) GetStage() DetectionStage {
	if x != nil {
		return x.Stage
	}
	return DetectionStage_DETECTION_STAGE_NONE
}

func (x *AnalyticDetectionInfo) GetStatus() DetectionStatus {
	if x != nil {
		return x.Status
	}
	return DetectionStatus_DETECTION_STATUS_NONE
}

func (x *AnalyticDetectionInfo) GetDetection() *Detection {
	if x != nil {
		return x.Detection
	}
	return nil
}

// DetectionInfo provides details on a given detection event specified by the id.
// Next Tag: 11
type DetectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The detection event ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A list of input resources for this detection. Usually a singleton, but can
	// contain multiple if multiple are accepted for this particular kind of
	// request
	ReqResources []*Resource `protobuf:"bytes,11,rep,name=req_resources,json=reqResources,proto3" json:"req_resources,omitempty"`
	// Results for individual analytics.
	AnalyticInfo []*AnalyticDetectionInfo `protobuf:"bytes,2,rep,name=analytic_info,json=analyticInfo,proto3" json:"analytic_info,omitempty"`
	// Results for fusion analytics
	FusionInfo []*FuserFusionInfo `protobuf:"bytes,8,rep,name=fusion_info,json=fusionInfo,proto3" json:"fusion_info,omitempty"`
	// Tags for the requested detection.
	Tags     map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserTags map[string]string `protobuf:"bytes,6,rep,name=user_tags,json=userTags,proto3" json:"user_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Meta     map[string]string `protobuf:"bytes,7,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A fused score, if requested.
	HasFused   bool    `protobuf:"varint,4,opt,name=has_fused,json=hasFused,proto3" json:"has_fused,omitempty"`
	FusedScore float64 `protobuf:"fixed64,5,opt,name=fused_score,json=fusedScore,proto3" json:"fused_score,omitempty"`
	// Progress indicator across all analytics.
	AnalyticsTotal    int32 `protobuf:"varint,9,opt,name=analytics_total,json=analyticsTotal,proto3" json:"analytics_total,omitempty"`
	AnalyticsFinished int32 `protobuf:"varint,10,opt,name=analytics_finished,json=analyticsFinished,proto3" json:"analytics_finished,omitempty"`
}

func (x *DetectionInfo) Reset() {
	*x = DetectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionInfo) ProtoMessage() {}

func (x *DetectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionInfo.ProtoReflect.Descriptor instead.
func (*DetectionInfo) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *DetectionInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetectionInfo) GetReqResources() []*Resource {
	if x != nil {
		return x.ReqResources
	}
	return nil
}

func (x *DetectionInfo) GetAnalyticInfo() []*AnalyticDetectionInfo {
	if x != nil {
		return x.AnalyticInfo
	}
	return nil
}

func (x *DetectionInfo) GetFusionInfo() []*FuserFusionInfo {
	if x != nil {
		return x.FusionInfo
	}
	return nil
}

func (x *DetectionInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DetectionInfo) GetUserTags() map[string]string {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *DetectionInfo) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DetectionInfo) GetHasFused() bool {
	if x != nil {
		return x.HasFused
	}
	return false
}

func (x *DetectionInfo) GetFusedScore() float64 {
	if x != nil {
		return x.FusedScore
	}
	return 0
}

func (x *DetectionInfo) GetAnalyticsTotal() int32 {
	if x != nil {
		return x.AnalyticsTotal
	}
	return 0
}

func (x *DetectionInfo) GetAnalyticsFinished() int32 {
	if x != nil {
		return x.AnalyticsFinished
	}
	return 0
}

// DetectionInfoRequest contains the ID of an individual detection event.
type DetectionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the detection, as returned by Detect or GetDetectionList.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If specified, fused scores will be returned as well.
	WantFused bool `protobuf:"varint,2,opt,name=want_fused,json=wantFused,proto3" json:"want_fused,omitempty"`
}

func (x *DetectionInfoRequest) Reset() {
	*x = DetectionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionInfoRequest) ProtoMessage() {}

func (x *DetectionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionInfoRequest.ProtoReflect.Descriptor instead.
func (*DetectionInfoRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *DetectionInfoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetectionInfoRequest) GetWantFused() bool {
	if x != nil {
		return x.WantFused
	}
	return false
}

type DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inclusive start time in seconds since the Epoch UTC.
	StartSecondsUtc int64 `protobuf:"varint,1,opt,name=start_seconds_utc,json=startSecondsUtc,proto3" json:"start_seconds_utc,omitempty"`
	// Inclusive end time in seconds since the Epoch UTC.
	EndSecondsUtc int64 `protobuf:"varint,2,opt,name=end_seconds_utc,json=endSecondsUtc,proto3" json:"end_seconds_utc,omitempty"`
}

func (x *DateRange) Reset() {
	*x = DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRange) ProtoMessage() {}

func (x *DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRange.ProtoReflect.Descriptor instead.
func (*DateRange) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *DateRange) GetStartSecondsUtc() int64 {
	if x != nil {
		return x.StartSecondsUtc
	}
	return 0
}

func (x *DateRange) GetEndSecondsUtc() int64 {
	if x != nil {
		return x.EndSecondsUtc
	}
	return 0
}

// Next Tag: 10
type DetectionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How much should be returned? Default: all.
	Verbosity DetectionListVerbosity `protobuf:"varint,12,opt,name=verbosity,proto3,enum=mediforproto.DetectionListVerbosity" json:"verbosity,omitempty"`
	// If specified (can be empty), all listed tags (both key and value) must be
	// simultaneously present for a detection ID to be returned.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// This contains a "fuzzy meta search" query. It will look through
	// detection metatags for string values that match the given query.
	MetaQuery string `protobuf:"bytes,10,opt,name=meta_query,json=metaQuery,proto3" json:"meta_query,omitempty"`
	// Filter on dates
	// If start time is present (nonzero), all detections must have at least one analytic with a create time >= start.
	// If end time is present (nonzero), all detections must have at least one analytic create time <= end.
	// If either is zero (not present), then the filter is unbounded in that direction.
	DateRange *DateRange `protobuf:"bytes,11,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// If specified, only returns results from the given list of detection IDs.
	// Good for returning a single detection or one of a few. Not great for very
	// long lists (thousands).
	DetectionIds []string `protobuf:"bytes,7,rep,name=detection_ids,json=detectionIds,proto3" json:"detection_ids,omitempty"`
	// Specify that detection info objects should have fusion scores.
	WantFused bool `protobuf:"varint,4,opt,name=want_fused,json=wantFused,proto3" json:"want_fused,omitempty"`
	// A series of keys to sort on, with the first key being the primary sort key
	// and following ones being seconday, tertiary, etc...
	OrderBy []*SortCol `protobuf:"bytes,5,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Fusion ID on which to sort by fusion score.
	FuserId string `protobuf:"bytes,6,opt,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	// Fusion score threshold, if needed. Only used if the threshold type is not the default value (no threshold).
	FusionThresholdType  FusionThresholdType `protobuf:"varint,8,opt,name=fusion_threshold_type,json=fusionThresholdType,proto3,enum=mediforproto.FusionThresholdType" json:"fusion_threshold_type,omitempty"`
	FusionThresholdValue float32             `protobuf:"fixed32,9,opt,name=fusion_threshold_value,json=fusionThresholdValue,proto3" json:"fusion_threshold_value,omitempty"`
	// Maximum number of items in the response. Optional.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// If a token was returned in the response, this can be used to continue
	// where the previous response left off.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *DetectionListRequest) Reset() {
	*x = DetectionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionListRequest) ProtoMessage() {}

func (x *DetectionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionListRequest.ProtoReflect.Descriptor instead.
func (*DetectionListRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *DetectionListRequest) GetVerbosity() DetectionListVerbosity {
	if x != nil {
		return x.Verbosity
	}
	return DetectionListVerbosity_DETECTION_VERBOSITY_FULL
}

func (x *DetectionListRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DetectionListRequest) GetMetaQuery() string {
	if x != nil {
		return x.MetaQuery
	}
	return ""
}

func (x *DetectionListRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *DetectionListRequest) GetDetectionIds() []string {
	if x != nil {
		return x.DetectionIds
	}
	return nil
}

func (x *DetectionListRequest) GetWantFused() bool {
	if x != nil {
		return x.WantFused
	}
	return false
}

func (x *DetectionListRequest) GetOrderBy() []*SortCol {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *DetectionListRequest) GetFuserId() string {
	if x != nil {
		return x.FuserId
	}
	return ""
}

func (x *DetectionListRequest) GetFusionThresholdType() FusionThresholdType {
	if x != nil {
		return x.FusionThresholdType
	}
	return FusionThresholdType_FUSION_NO_THRESHOLD
}

func (x *DetectionListRequest) GetFusionThresholdValue() float32 {
	if x != nil {
		return x.FusionThresholdValue
	}
	return 0
}

func (x *DetectionListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DetectionListRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// DetectionList provides a list of DetectionInfo objects.
// Next Tag: 4
type DetectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detections []*DetectionInfo `protobuf:"bytes,1,rep,name=detections,proto3" json:"detections,omitempty"`
	// Total detections in the filtered list.
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// If this is non-empty, there are more results to be returned. Pass it into
	// a DetectionListRequest to obtain remaining results.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *DetectionList) Reset() {
	*x = DetectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionList) ProtoMessage() {}

func (x *DetectionList) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionList.ProtoReflect.Descriptor instead.
func (*DetectionList) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *DetectionList) GetDetections() []*DetectionInfo {
	if x != nil {
		return x.Detections
	}
	return nil
}

func (x *DetectionList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DetectionList) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// FusionRequest contains a fusion object or a list of detectionIDs to be fused.
// Next ID: 7
type FusionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional ID for this fusion. If not provided, one will be assigned.
	// Must be unique from any other provided ID: a collision will prevent
	// this request from being fulfilled.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A Fusion Proto containing the original probe as well as the detection objects from
	// each analytic that ran over that probe.
	Request *Fusion `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// IDs for the fusion analytics
	FuserId []string `protobuf:"bytes,4,rep,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	// Tags to apply to this fusion.  To be inserted into the database as json.
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DetectionID for the probes on which to perform fusion if no request is specified
	DetectionId string `protobuf:"bytes,5,opt,name=detection_id,json=detectionId,proto3" json:"detection_id,omitempty"`
	// Output directory to use ONLY if building request from a detection ID
	DetectionIdOutDir string `protobuf:"bytes,6,opt,name=detection_id_out_dir,json=detectionIdOutDir,proto3" json:"detection_id_out_dir,omitempty"`
}

func (x *FusionRequest) Reset() {
	*x = FusionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FusionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FusionRequest) ProtoMessage() {}

func (x *FusionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FusionRequest.ProtoReflect.Descriptor instead.
func (*FusionRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *FusionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FusionRequest) GetRequest() *Fusion {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FusionRequest) GetFuserId() []string {
	if x != nil {
		return x.FuserId
	}
	return nil
}

func (x *FusionRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FusionRequest) GetDetectionId() string {
	if x != nil {
		return x.DetectionId
	}
	return ""
}

func (x *FusionRequest) GetDetectionIdOutDir() string {
	if x != nil {
		return x.DetectionIdOutDir
	}
	return ""
}

// AnalyticDetectionInfo provides details on the status of a detection being
// performed by a given analytic.
// Next ID: 5
type FuserFusionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fusion algorithmc that produced this result.
	FuserId string `protobuf:"bytes,1,opt,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	// Current processing stage for the entire detection event (all analytics) if
	// in progress, or PT_STAGE_FINISHED if completed. When complete, the status
	// field will have a non-default value.
	Stage DetectionStage `protobuf:"varint,2,opt,name=stage,proto3,enum=mediforproto.DetectionStage" json:"stage,omitempty"`
	// Final status when we are in PT_STAGE_FINISHED.
	Status DetectionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=mediforproto.DetectionStatus" json:"status,omitempty"`
	// The Fusion with the result and status filled out (and the request).
	// If the response and status are empty (default), then it is not finished.
	Fusion *Fusion `protobuf:"bytes,4,opt,name=fusion,proto3" json:"fusion,omitempty"`
}

func (x *FuserFusionInfo) Reset() {
	*x = FuserFusionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuserFusionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuserFusionInfo) ProtoMessage() {}

func (x *FuserFusionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuserFusionInfo.ProtoReflect.Descriptor instead.
func (*FuserFusionInfo) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *FuserFusionInfo) GetFuserId() string {
	if x != nil {
		return x.FuserId
	}
	return ""
}

func (x *FuserFusionInfo) GetStage() DetectionStage {
	if x != nil {
		return x.Stage
	}
	return DetectionStage_DETECTION_STAGE_NONE
}

func (x *FuserFusionInfo) GetStatus() DetectionStatus {
	if x != nil {
		return x.Status
	}
	return DetectionStatus_DETECTION_STATUS_NONE
}

func (x *FuserFusionInfo) GetFusion() *Fusion {
	if x != nil {
		return x.Fusion
	}
	return nil
}

// FusionInfo provides details on a given fusion event specified by the ID.
type FusionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fusion event ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Results for individual fusion analytics.
	FusionInfos []*FuserFusionInfo `protobuf:"bytes,2,rep,name=fusion_infos,json=fusionInfos,proto3" json:"fusion_infos,omitempty"`
	// Tags for the requested fusion.
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A fused score, if requested.
	HasFused   bool    `protobuf:"varint,4,opt,name=has_fused,json=hasFused,proto3" json:"has_fused,omitempty"`
	FusedScore float64 `protobuf:"fixed64,5,opt,name=fused_score,json=fusedScore,proto3" json:"fused_score,omitempty"`
}

func (x *FusionInfo) Reset() {
	*x = FusionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FusionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FusionInfo) ProtoMessage() {}

func (x *FusionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FusionInfo.ProtoReflect.Descriptor instead.
func (*FusionInfo) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{10}
}

func (x *FusionInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FusionInfo) GetFusionInfos() []*FuserFusionInfo {
	if x != nil {
		return x.FusionInfos
	}
	return nil
}

func (x *FusionInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FusionInfo) GetHasFused() bool {
	if x != nil {
		return x.HasFused
	}
	return false
}

func (x *FusionInfo) GetFusedScore() float64 {
	if x != nil {
		return x.FusedScore
	}
	return 0
}

type FuseAllIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuserId []string `protobuf:"bytes,1,rep,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	OutDir  string   `protobuf:"bytes,2,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
}

func (x *FuseAllIDsRequest) Reset() {
	*x = FuseAllIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseAllIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseAllIDsRequest) ProtoMessage() {}

func (x *FuseAllIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseAllIDsRequest.ProtoReflect.Descriptor instead.
func (*FuseAllIDsRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *FuseAllIDsRequest) GetFuserId() []string {
	if x != nil {
		return x.FuserId
	}
	return nil
}

func (x *FuseAllIDsRequest) GetOutDir() string {
	if x != nil {
		return x.OutDir
	}
	return ""
}

type FuseAllIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FuseAllIDsResponse) Reset() {
	*x = FuseAllIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseAllIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseAllIDsResponse) ProtoMessage() {}

func (x *FuseAllIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseAllIDsResponse.ProtoReflect.Descriptor instead.
func (*FuseAllIDsResponse) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{12}
}

// UpdateDetectionTagsRequest contains new tags to replace or merge with existing tags.
// Next Tag: 5
type UpdateDetectionTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The detection ID to update.
	DetectionId string `protobuf:"bytes,1,opt,name=detection_id,json=detectionId,proto3" json:"detection_id,omitempty"`
	// If true, replaces all user tags with the given tag set. Default is to
	// merge (replacing any duplicates, but leaving unmentioned tag keys alone).
	// Ignores delete_tags if set.
	Replace bool `protobuf:"varint,2,opt,name=replace,proto3" json:"replace,omitempty"`
	// Tags to use in the request. Only updates user tags, not bare system tags.
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Tag keys to delete. Only used if replace is false.
	DeleteTags []string `protobuf:"bytes,4,rep,name=delete_tags,json=deleteTags,proto3" json:"delete_tags,omitempty"`
}

func (x *UpdateDetectionTagsRequest) Reset() {
	*x = UpdateDetectionTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDetectionTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDetectionTagsRequest) ProtoMessage() {}

func (x *UpdateDetectionTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDetectionTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateDetectionTagsRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateDetectionTagsRequest) GetDetectionId() string {
	if x != nil {
		return x.DetectionId
	}
	return ""
}

func (x *UpdateDetectionTagsRequest) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *UpdateDetectionTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateDetectionTagsRequest) GetDeleteTags() []string {
	if x != nil {
		return x.DeleteTags
	}
	return nil
}

// DetectionTagInfoRequest asks for high-level information about detection tags.
type DetectionTagInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If specified, only tags that coexist with the given required tags will
	// be returned. One possible use of this is to limit tags returned by login
	// group.
	RequireTags map[string]string `protobuf:"bytes,1,rep,name=require_tags,json=requireTags,proto3" json:"require_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If specified, all keys prefixed with any value in this list will
	// not be returned in the result.
	SkipPrefixes []string `protobuf:"bytes,2,rep,name=skip_prefixes,json=skipPrefixes,proto3" json:"skip_prefixes,omitempty"`
}

func (x *DetectionTagInfoRequest) Reset() {
	*x = DetectionTagInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionTagInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionTagInfoRequest) ProtoMessage() {}

func (x *DetectionTagInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionTagInfoRequest.ProtoReflect.Descriptor instead.
func (*DetectionTagInfoRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *DetectionTagInfoRequest) GetRequireTags() map[string]string {
	if x != nil {
		return x.RequireTags
	}
	return nil
}

func (x *DetectionTagInfoRequest) GetSkipPrefixes() []string {
	if x != nil {
		return x.SkipPrefixes
	}
	return nil
}

// DetectionTagInfo contains high-level information about detection tags.
type DetectionTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains mapping from "key=value" to number of times that specific key/value pair is found.
	TagCounts map[string]int32 `protobuf:"bytes,1,rep,name=tag_counts,json=tagCounts,proto3" json:"tag_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Contains mapping from "key=value" in *user tags* to number of times they appear.
	// Note that this can have overlap with system tags, and it will report these separately.
	UserTagCounts map[string]int32 `protobuf:"bytes,2,rep,name=user_tag_counts,json=userTagCounts,proto3" json:"user_tag_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DetectionTagInfo) Reset() {
	*x = DetectionTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionTagInfo) ProtoMessage() {}

func (x *DetectionTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionTagInfo.ProtoReflect.Descriptor instead.
func (*DetectionTagInfo) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{15}
}

func (x *DetectionTagInfo) GetTagCounts() map[string]int32 {
	if x != nil {
		return x.TagCounts
	}
	return nil
}

func (x *DetectionTagInfo) GetUserTagCounts() map[string]int32 {
	if x != nil {
		return x.UserTagCounts
	}
	return nil
}

type DeleteDetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetectionId string `protobuf:"bytes,1,opt,name=detection_id,json=detectionId,proto3" json:"detection_id,omitempty"`
}

func (x *DeleteDetectionRequest) Reset() {
	*x = DeleteDetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDetectionRequest) ProtoMessage() {}

func (x *DeleteDetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDetectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteDetectionRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteDetectionRequest) GetDetectionId() string {
	if x != nil {
		return x.DetectionId
	}
	return ""
}

// AnalyticMeta containes analytic metadata defining which analytics are currently active
// on the system, what they do, and their resource requirements
type AnalyticMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version     string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Cpu         float64           `protobuf:"fixed64,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Ram         float64           `protobuf:"fixed64,4,opt,name=ram,proto3" json:"ram,omitempty"`
	Gpu         int32             `protobuf:"varint,5,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Media       []MediaType       `protobuf:"varint,6,rep,packed,name=media,proto3,enum=mediforproto.MediaType" json:"media,omitempty"`
	Description string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Name        string            `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	UserFields  map[string]string `protobuf:"bytes,9,rep,name=user_fields,json=userFields,proto3" json:"user_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AnalyticMeta) Reset() {
	*x = AnalyticMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticMeta) ProtoMessage() {}

func (x *AnalyticMeta) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticMeta.ProtoReflect.Descriptor instead.
func (*AnalyticMeta) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{17}
}

func (x *AnalyticMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnalyticMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AnalyticMeta) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *AnalyticMeta) GetRam() float64 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *AnalyticMeta) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *AnalyticMeta) GetMedia() []MediaType {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *AnalyticMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnalyticMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnalyticMeta) GetUserFields() map[string]string {
	if x != nil {
		return x.UserFields
	}
	return nil
}

// AnalyticList holds a list of AnalyticMeta configuration metadata objects
type AnalyticList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analytics []*AnalyticMeta `protobuf:"bytes,1,rep,name=analytics,proto3" json:"analytics,omitempty"`
}

func (x *AnalyticList) Reset() {
	*x = AnalyticList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticList) ProtoMessage() {}

func (x *AnalyticList) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticList.ProtoReflect.Descriptor instead.
func (*AnalyticList) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{18}
}

func (x *AnalyticList) GetAnalytics() []*AnalyticMeta {
	if x != nil {
		return x.Analytics
	}
	return nil
}

// Lists detections
type ListDetectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter results by score
	ScoreFilter *ScoreFilter `protobuf:"bytes,1,opt,name=score_filter,json=scoreFilter,proto3" json:"score_filter,omitempty"`
	// Filter results by metadata
	MetaFilters []*MetaFilter `protobuf:"bytes,2,rep,name=meta_filters,json=metaFilters,proto3" json:"meta_filters,omitempty"`
	// Filter results by tags
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Exclude results with the specified tags
	ExcludeTags map[string]string `protobuf:"bytes,9,rep,name=exclude_tags,json=excludeTags,proto3" json:"exclude_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Filter results by metadata query
	MetaQuery string `protobuf:"bytes,10,opt,name=meta_query,json=metaQuery,proto3" json:"meta_query,omitempty"`
	// Sort results
	OrderBy []*SortCol `protobuf:"bytes,4,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Analytic whose score is used for filtering and sorting results. If not
	// specified, fuser_id is used instead.
	AnalyticId string `protobuf:"bytes,5,opt,name=analytic_id,json=analyticId,proto3" json:"analytic_id,omitempty"`
	// Fuser whose score is used for filtering and sorting results. Only used
	// if analytic_id is not specified.
	FuserId string `protobuf:"bytes,6,opt,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	// Return at most the specified number of results
	PageSize int32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Return the specified page of results
	PageToken string `protobuf:"bytes,8,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListDetectionsRequest) Reset() {
	*x = ListDetectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDetectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDetectionsRequest) ProtoMessage() {}

func (x *ListDetectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDetectionsRequest.ProtoReflect.Descriptor instead.
func (*ListDetectionsRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{19}
}

func (x *ListDetectionsRequest) GetScoreFilter() *ScoreFilter {
	if x != nil {
		return x.ScoreFilter
	}
	return nil
}

func (x *ListDetectionsRequest) GetMetaFilters() []*MetaFilter {
	if x != nil {
		return x.MetaFilters
	}
	return nil
}

func (x *ListDetectionsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListDetectionsRequest) GetExcludeTags() map[string]string {
	if x != nil {
		return x.ExcludeTags
	}
	return nil
}

func (x *ListDetectionsRequest) GetMetaQuery() string {
	if x != nil {
		return x.MetaQuery
	}
	return ""
}

func (x *ListDetectionsRequest) GetOrderBy() []*SortCol {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ListDetectionsRequest) GetAnalyticId() string {
	if x != nil {
		return x.AnalyticId
	}
	return ""
}

func (x *ListDetectionsRequest) GetFuserId() string {
	if x != nil {
		return x.FuserId
	}
	return ""
}

func (x *ListDetectionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDetectionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ScoreFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the `min` field is valid
	HasMin bool `protobuf:"varint,1,opt,name=has_min,json=hasMin,proto3" json:"has_min,omitempty"`
	// Minimum score (inclusive)
	Min float64 `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`
	// Whether the `max` field is valid
	HasMax bool `protobuf:"varint,3,opt,name=has_max,json=hasMax,proto3" json:"has_max,omitempty"`
	// Maximum score (inclusive)
	Max float64 `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ScoreFilter) Reset() {
	*x = ScoreFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreFilter) ProtoMessage() {}

func (x *ScoreFilter) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreFilter.ProtoReflect.Descriptor instead.
func (*ScoreFilter) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{20}
}

func (x *ScoreFilter) GetHasMin() bool {
	if x != nil {
		return x.HasMin
	}
	return false
}

func (x *ScoreFilter) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ScoreFilter) GetHasMax() bool {
	if x != nil {
		return x.HasMax
	}
	return false
}

func (x *ScoreFilter) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type MetaFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata key
	MetaKey string `protobuf:"bytes,1,opt,name=meta_key,json=metaKey,proto3" json:"meta_key,omitempty"`
	// Whether the `min` field is valid
	HasMin bool `protobuf:"varint,2,opt,name=has_min,json=hasMin,proto3" json:"has_min,omitempty"`
	// Minimum value (inclusive)
	Min string `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	// Whether the `max` field is valid
	HasMax bool `protobuf:"varint,4,opt,name=has_max,json=hasMax,proto3" json:"has_max,omitempty"`
	// Maximum value (inclusive)
	Max string `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *MetaFilter) Reset() {
	*x = MetaFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaFilter) ProtoMessage() {}

func (x *MetaFilter) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaFilter.ProtoReflect.Descriptor instead.
func (*MetaFilter) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{21}
}

func (x *MetaFilter) GetMetaKey() string {
	if x != nil {
		return x.MetaKey
	}
	return ""
}

func (x *MetaFilter) GetHasMin() bool {
	if x != nil {
		return x.HasMin
	}
	return false
}

func (x *MetaFilter) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *MetaFilter) GetHasMax() bool {
	if x != nil {
		return x.HasMax
	}
	return false
}

func (x *MetaFilter) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

// Updates a detection's metadata
type UpdateDetectionMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detection ID
	DetectionId string `protobuf:"bytes,1,opt,name=detection_id,json=detectionId,proto3" json:"detection_id,omitempty"`
	// Metadata to be merged with the detection's existing metadata
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateDetectionMetadataRequest) Reset() {
	*x = UpdateDetectionMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDetectionMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDetectionMetadataRequest) ProtoMessage() {}

func (x *UpdateDetectionMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDetectionMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateDetectionMetadataRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateDetectionMetadataRequest) GetDetectionId() string {
	if x != nil {
		return x.DetectionId
	}
	return ""
}

func (x *UpdateDetectionMetadataRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Gets analytic and fuser stats
type GetAnalyticStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analytics to get. If empty, returns all analytics.
	AnalyticIds []string `protobuf:"bytes,1,rep,name=analytic_ids,json=analyticIds,proto3" json:"analytic_ids,omitempty"`
	// Fusers to get. If empty, returns all fusers.
	FuserIds []string `protobuf:"bytes,2,rep,name=fuser_ids,json=fuserIds,proto3" json:"fuser_ids,omitempty"`
}

func (x *GetAnalyticStatsRequest) Reset() {
	*x = GetAnalyticStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnalyticStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnalyticStatsRequest) ProtoMessage() {}

func (x *GetAnalyticStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnalyticStatsRequest.ProtoReflect.Descriptor instead.
func (*GetAnalyticStatsRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{23}
}

func (x *GetAnalyticStatsRequest) GetAnalyticIds() []string {
	if x != nil {
		return x.AnalyticIds
	}
	return nil
}

func (x *GetAnalyticStatsRequest) GetFuserIds() []string {
	if x != nil {
		return x.FuserIds
	}
	return nil
}

type GetAnalyticStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analytic stats
	AnalyticStats []*AnalyticStats `protobuf:"bytes,1,rep,name=analytic_stats,json=analyticStats,proto3" json:"analytic_stats,omitempty"`
	// Fuser stats
	FuserStats []*AnalyticStats `protobuf:"bytes,2,rep,name=fuser_stats,json=fuserStats,proto3" json:"fuser_stats,omitempty"`
}

func (x *GetAnalyticStatsResponse) Reset() {
	*x = GetAnalyticStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnalyticStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnalyticStatsResponse) ProtoMessage() {}

func (x *GetAnalyticStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnalyticStatsResponse.ProtoReflect.Descriptor instead.
func (*GetAnalyticStatsResponse) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{24}
}

func (x *GetAnalyticStatsResponse) GetAnalyticStats() []*AnalyticStats {
	if x != nil {
		return x.AnalyticStats
	}
	return nil
}

func (x *GetAnalyticStatsResponse) GetFuserStats() []*AnalyticStats {
	if x != nil {
		return x.FuserStats
	}
	return nil
}

type AnalyticStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analytic/fuser ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Number of tasks that are pending
	Pending int32 `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	// Number of tasks that are running
	Running int32 `protobuf:"varint,3,opt,name=running,proto3" json:"running,omitempty"`
	// Number of tasks that succeeded and produced a score
	Succeeded int32 `protobuf:"varint,4,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	// Number of tasks that succeeded but did not produce a score
	OptedOut int32 `protobuf:"varint,6,opt,name=opted_out,json=optedOut,proto3" json:"opted_out,omitempty"`
	// Number of tasks that failed
	Failed int32 `protobuf:"varint,5,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *AnalyticStats) Reset() {
	*x = AnalyticStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticStats) ProtoMessage() {}

func (x *AnalyticStats) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticStats.ProtoReflect.Descriptor instead.
func (*AnalyticStats) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{25}
}

func (x *AnalyticStats) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnalyticStats) GetPending() int32 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *AnalyticStats) GetRunning() int32 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *AnalyticStats) GetSucceeded() int32 {
	if x != nil {
		return x.Succeeded
	}
	return 0
}

func (x *AnalyticStats) GetOptedOut() int32 {
	if x != nil {
		return x.OptedOut
	}
	return 0
}

func (x *AnalyticStats) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

// Gets histogram for the specified analytic
type GetHistogramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analytic ID. If empty, use fuser instead.
	AnalyticId string `protobuf:"bytes,1,opt,name=analytic_id,json=analyticId,proto3" json:"analytic_id,omitempty"`
	// Fuser ID
	FuserId string `protobuf:"bytes,2,opt,name=fuser_id,json=fuserId,proto3" json:"fuser_id,omitempty"`
	// Filters detections by system and/or user tags
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Excludes detections with the specified tags
	ExcludeTags map[string]string `protobuf:"bytes,5,rep,name=exclude_tags,json=excludeTags,proto3" json:"exclude_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Number of histogram buckets (default 10)
	NumBuckets int32 `protobuf:"varint,4,opt,name=num_buckets,json=numBuckets,proto3" json:"num_buckets,omitempty"`
}

func (x *GetHistogramRequest) Reset() {
	*x = GetHistogramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistogramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistogramRequest) ProtoMessage() {}

func (x *GetHistogramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistogramRequest.ProtoReflect.Descriptor instead.
func (*GetHistogramRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{26}
}

func (x *GetHistogramRequest) GetAnalyticId() string {
	if x != nil {
		return x.AnalyticId
	}
	return ""
}

func (x *GetHistogramRequest) GetFuserId() string {
	if x != nil {
		return x.FuserId
	}
	return ""
}

func (x *GetHistogramRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetHistogramRequest) GetExcludeTags() map[string]string {
	if x != nil {
		return x.ExcludeTags
	}
	return nil
}

func (x *GetHistogramRequest) GetNumBuckets() int32 {
	if x != nil {
		return x.NumBuckets
	}
	return 0
}

type GetHistogramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *GetHistogramResponse) Reset() {
	*x = GetHistogramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistogramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistogramResponse) ProtoMessage() {}

func (x *GetHistogramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistogramResponse.ProtoReflect.Descriptor instead.
func (*GetHistogramResponse) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{27}
}

func (x *GetHistogramResponse) GetBuckets() []*Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min       float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Max       float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
	Frequency int32   `protobuf:"varint,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{28}
}

func (x *Bucket) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Bucket) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Bucket) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

// Deletes detection tasks that failed
type DeleteFailedAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFailedAnalyticsRequest) Reset() {
	*x = DeleteFailedAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFailedAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFailedAnalyticsRequest) ProtoMessage() {}

func (x *DeleteFailedAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFailedAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*DeleteFailedAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{29}
}

type DeleteFailedAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps detection IDs to deleted analytics
	DeletedAnalytics map[string]*DeletedAnalytics `protobuf:"bytes,1,rep,name=deleted_analytics,json=deletedAnalytics,proto3" json:"deleted_analytics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteFailedAnalyticsResponse) Reset() {
	*x = DeleteFailedAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFailedAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFailedAnalyticsResponse) ProtoMessage() {}

func (x *DeleteFailedAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFailedAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*DeleteFailedAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteFailedAnalyticsResponse) GetDeletedAnalytics() map[string]*DeletedAnalytics {
	if x != nil {
		return x.DeletedAnalytics
	}
	return nil
}

type DeletedAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deleted analytic IDs
	DeletedAnalyticIds []string `protobuf:"bytes,1,rep,name=deleted_analytic_ids,json=deletedAnalyticIds,proto3" json:"deleted_analytic_ids,omitempty"`
}

func (x *DeletedAnalytics) Reset() {
	*x = DeletedAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedAnalytics) ProtoMessage() {}

func (x *DeletedAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedAnalytics.ProtoReflect.Descriptor instead.
func (*DeletedAnalytics) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{31}
}

func (x *DeletedAnalytics) GetDeletedAnalyticIds() []string {
	if x != nil {
		return x.DeletedAnalyticIds
	}
	return nil
}

// Gets analytics and fusers that produced a score for at least one detection
type GetAnalyticsWithScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters detections by system and/or user tags
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Excludes detections with the specified tags
	ExcludeTags map[string]string `protobuf:"bytes,2,rep,name=exclude_tags,json=excludeTags,proto3" json:"exclude_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAnalyticsWithScoresRequest) Reset() {
	*x = GetAnalyticsWithScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnalyticsWithScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnalyticsWithScoresRequest) ProtoMessage() {}

func (x *GetAnalyticsWithScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnalyticsWithScoresRequest.ProtoReflect.Descriptor instead.
func (*GetAnalyticsWithScoresRequest) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{32}
}

func (x *GetAnalyticsWithScoresRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetAnalyticsWithScoresRequest) GetExcludeTags() map[string]string {
	if x != nil {
		return x.ExcludeTags
	}
	return nil
}

type GetAnalyticsWithScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analytic IDs with scores
	AnalyticIds []string `protobuf:"bytes,1,rep,name=analytic_ids,json=analyticIds,proto3" json:"analytic_ids,omitempty"`
	// Fuser IDs with scores
	FuserIds []string `protobuf:"bytes,2,rep,name=fuser_ids,json=fuserIds,proto3" json:"fuser_ids,omitempty"`
}

func (x *GetAnalyticsWithScoresResponse) Reset() {
	*x = GetAnalyticsWithScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_medifor_v1_pipeline_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnalyticsWithScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnalyticsWithScoresResponse) ProtoMessage() {}

func (x *GetAnalyticsWithScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_medifor_v1_pipeline_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnalyticsWithScoresResponse.ProtoReflect.Descriptor instead.
func (*GetAnalyticsWithScoresResponse) Descriptor() ([]byte, []int) {
	return file_medifor_v1_pipeline_proto_rawDescGZIP(), []int{33}
}

func (x *GetAnalyticsWithScoresResponse) GetAnalyticIds() []string {
	if x != nil {
		return x.AnalyticIds
	}
	return nil
}

func (x *GetAnalyticsWithScoresResponse) GetFuserIds() []string {
	if x != nil {
		return x.FuserIds
	}
	return nil
}

var File_medifor_v1_pipeline_proto protoreflect.FileDescriptor

var file_medifor_v1_pipeline_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x66,
	0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01,
	0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x22, 0xb9, 0x04, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3c,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01,
	0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x05, 0x0a, 0x0d, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65, 0x72, 0x46, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x46,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x46, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x75, 0x73, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a,
	0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x46, 0x75, 0x73, 0x65, 0x64, 0x22, 0x5f, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x55, 0x74, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x74, 0x63, 0x22, 0x86,
	0x05, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6e,
	0x74, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77,
	0x61, 0x6e, 0x74, 0x46, 0x75, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6c, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x0d,
	0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x4f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x46, 0x75, 0x73, 0x65, 0x72, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x0a, 0x46, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x66, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x46, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x75, 0x73, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x11, 0x46, 0x75, 0x73, 0x65,
	0x41, 0x6c, 0x6c, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x44, 0x69,
	0x72, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x75, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbb, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x61, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a,
	0x3c, 0x0a, 0x0e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdf, 0x02, 0x0a,
	0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x2d, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48,
	0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x22, 0xf0, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x57, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6c, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x0b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73,
	0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x22, 0x7d, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22,
	0xd8, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x66, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x83, 0x03,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x63, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x49, 0x64, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x49, 0x64, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x2a, 0x81, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x68, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x07, 0x53,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x45, 0x54, 0x41, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x13, 0x46,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f,
	0x4c, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x2a, 0x45, 0x0a,
	0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x03, 0x2a, 0x57, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x42,
	0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x32, 0xf7, 0x0a,
	0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x04, 0x46, 0x75, 0x73,
	0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x46, 0x75, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0a, 0x46,
	0x75, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65, 0x41, 0x6c, 0x6c,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66,
	0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x64, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x70, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x66, 0x6f, 0x72, 0x65, 0x6e,
	0x73, 0x69, 0x63, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_medifor_v1_pipeline_proto_rawDescOnce sync.Once
	file_medifor_v1_pipeline_proto_rawDescData = file_medifor_v1_pipeline_proto_rawDesc
)

func file_medifor_v1_pipeline_proto_rawDescGZIP() []byte {
	file_medifor_v1_pipeline_proto_rawDescOnce.Do(func() {
		file_medifor_v1_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_medifor_v1_pipeline_proto_rawDescData)
	})
	return file_medifor_v1_pipeline_proto_rawDescData
}

var file_medifor_v1_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_medifor_v1_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_medifor_v1_pipeline_proto_goTypes = []interface{}{
	(DetectionStage)(0),                    // 0: mediforproto.DetectionStage
	(DetectionStatus)(0),                   // 1: mediforproto.DetectionStatus
	(SortKey)(0),                           // 2: mediforproto.SortKey
	(FusionThresholdType)(0),               // 3: mediforproto.FusionThresholdType
	(MediaType)(0),                         // 4: mediforproto.MediaType
	(DetectionListVerbosity)(0),            // 5: mediforproto.DetectionListVerbosity
	(*SortCol)(nil),                        // 6: mediforproto.SortCol
	(*DetectionRequest)(nil),               // 7: mediforproto.DetectionRequest
	(*AnalyticDetectionInfo)(nil),          // 8: mediforproto.AnalyticDetectionInfo
	(*DetectionInfo)(nil),                  // 9: mediforproto.DetectionInfo
	(*DetectionInfoRequest)(nil),           // 10: mediforproto.DetectionInfoRequest
	(*DateRange)(nil),                      // 11: mediforproto.DateRange
	(*DetectionListRequest)(nil),           // 12: mediforproto.DetectionListRequest
	(*DetectionList)(nil),                  // 13: mediforproto.DetectionList
	(*FusionRequest)(nil),                  // 14: mediforproto.FusionRequest
	(*FuserFusionInfo)(nil),                // 15: mediforproto.FuserFusionInfo
	(*FusionInfo)(nil),                     // 16: mediforproto.FusionInfo
	(*FuseAllIDsRequest)(nil),              // 17: mediforproto.FuseAllIDsRequest
	(*FuseAllIDsResponse)(nil),             // 18: mediforproto.FuseAllIDsResponse
	(*UpdateDetectionTagsRequest)(nil),     // 19: mediforproto.UpdateDetectionTagsRequest
	(*DetectionTagInfoRequest)(nil),        // 20: mediforproto.DetectionTagInfoRequest
	(*DetectionTagInfo)(nil),               // 21: mediforproto.DetectionTagInfo
	(*DeleteDetectionRequest)(nil),         // 22: mediforproto.DeleteDetectionRequest
	(*AnalyticMeta)(nil),                   // 23: mediforproto.AnalyticMeta
	(*AnalyticList)(nil),                   // 24: mediforproto.AnalyticList
	(*ListDetectionsRequest)(nil),          // 25: mediforproto.ListDetectionsRequest
	(*ScoreFilter)(nil),                    // 26: mediforproto.ScoreFilter
	(*MetaFilter)(nil),                     // 27: mediforproto.MetaFilter
	(*UpdateDetectionMetadataRequest)(nil), // 28: mediforproto.UpdateDetectionMetadataRequest
	(*GetAnalyticStatsRequest)(nil),        // 29: mediforproto.GetAnalyticStatsRequest
	(*GetAnalyticStatsResponse)(nil),       // 30: mediforproto.GetAnalyticStatsResponse
	(*AnalyticStats)(nil),                  // 31: mediforproto.AnalyticStats
	(*GetHistogramRequest)(nil),            // 32: mediforproto.GetHistogramRequest
	(*GetHistogramResponse)(nil),           // 33: mediforproto.GetHistogramResponse
	(*Bucket)(nil),                         // 34: mediforproto.Bucket
	(*DeleteFailedAnalyticsRequest)(nil),   // 35: mediforproto.DeleteFailedAnalyticsRequest
	(*DeleteFailedAnalyticsResponse)(nil),  // 36: mediforproto.DeleteFailedAnalyticsResponse
	(*DeletedAnalytics)(nil),               // 37: mediforproto.DeletedAnalytics
	(*GetAnalyticsWithScoresRequest)(nil),  // 38: mediforproto.GetAnalyticsWithScoresRequest
	(*GetAnalyticsWithScoresResponse)(nil), // 39: mediforproto.GetAnalyticsWithScoresResponse
	nil,                                    // 40: mediforproto.DetectionRequest.TagsEntry
	nil,                                    // 41: mediforproto.DetectionRequest.UserTagsEntry
	nil,                                    // 42: mediforproto.DetectionRequest.MetaEntry
	nil,                                    // 43: mediforproto.DetectionInfo.TagsEntry
	nil,                                    // 44: mediforproto.DetectionInfo.UserTagsEntry
	nil,                                    // 45: mediforproto.DetectionInfo.MetaEntry
	nil,                                    // 46: mediforproto.DetectionListRequest.TagsEntry
	nil,                                    // 47: mediforproto.FusionRequest.TagsEntry
	nil,                                    // 48: mediforproto.FusionInfo.TagsEntry
	nil,                                    // 49: mediforproto.UpdateDetectionTagsRequest.TagsEntry
	nil,                                    // 50: mediforproto.DetectionTagInfoRequest.RequireTagsEntry
	nil,                                    // 51: mediforproto.DetectionTagInfo.TagCountsEntry
	nil,                                    // 52: mediforproto.DetectionTagInfo.UserTagCountsEntry
	nil,                                    // 53: mediforproto.AnalyticMeta.UserFieldsEntry
	nil,                                    // 54: mediforproto.ListDetectionsRequest.TagsEntry
	nil,                                    // 55: mediforproto.ListDetectionsRequest.ExcludeTagsEntry
	nil,                                    // 56: mediforproto.UpdateDetectionMetadataRequest.MetadataEntry
	nil,                                    // 57: mediforproto.GetHistogramRequest.TagsEntry
	nil,                                    // 58: mediforproto.GetHistogramRequest.ExcludeTagsEntry
	nil,                                    // 59: mediforproto.DeleteFailedAnalyticsResponse.DeletedAnalyticsEntry
	nil,                                    // 60: mediforproto.GetAnalyticsWithScoresRequest.TagsEntry
	nil,                                    // 61: mediforproto.GetAnalyticsWithScoresRequest.ExcludeTagsEntry
	(*Detection)(nil),                      // 62: mediforproto.Detection
	(*Resource)(nil),                       // 63: mediforproto.Resource
	(*Fusion)(nil),                         // 64: mediforproto.Fusion
	(*Empty)(nil),                          // 65: mediforproto.Empty
}
var file_medifor_v1_pipeline_proto_depIdxs = []int32{
	2,  // 0: mediforproto.SortCol.key:type_name -> mediforproto.SortKey
	62, // 1: mediforproto.DetectionRequest.request:type_name -> mediforproto.Detection
	40, // 2: mediforproto.DetectionRequest.tags:type_name -> mediforproto.DetectionRequest.TagsEntry
	41, // 3: mediforproto.DetectionRequest.user_tags:type_name -> mediforproto.DetectionRequest.UserTagsEntry
	42, // 4: mediforproto.DetectionRequest.meta:type_name -> mediforproto.DetectionRequest.MetaEntry
	0,  // 5: mediforproto.AnalyticDetectionInfo.stage:type_name -> mediforproto.DetectionStage
	1,  // 6: mediforproto.AnalyticDetectionInfo.status:type_name -> mediforproto.DetectionStatus
	62, // 7: mediforproto.AnalyticDetectionInfo.detection:type_name -> mediforproto.Detection
	63, // 8: mediforproto.DetectionInfo.req_resources:type_name -> mediforproto.Resource
	8,  // 9: mediforproto.DetectionInfo.analytic_info:type_name -> mediforproto.AnalyticDetectionInfo
	15, // 10: mediforproto.DetectionInfo.fusion_info:type_name -> mediforproto.FuserFusionInfo
	43, // 11: mediforproto.DetectionInfo.tags:type_name -> mediforproto.DetectionInfo.TagsEntry
	44, // 12: mediforproto.DetectionInfo.user_tags:type_name -> mediforproto.DetectionInfo.UserTagsEntry
	45, // 13: mediforproto.DetectionInfo.meta:type_name -> mediforproto.DetectionInfo.MetaEntry
	5,  // 14: mediforproto.DetectionListRequest.verbosity:type_name -> mediforproto.DetectionListVerbosity
	46, // 15: mediforproto.DetectionListRequest.tags:type_name -> mediforproto.DetectionListRequest.TagsEntry
	11, // 16: mediforproto.DetectionListRequest.date_range:type_name -> mediforproto.DateRange
	6,  // 17: mediforproto.DetectionListRequest.order_by:type_name -> mediforproto.SortCol
	3,  // 18: mediforproto.DetectionListRequest.fusion_threshold_type:type_name -> mediforproto.FusionThresholdType
	9,  // 19: mediforproto.DetectionList.detections:type_name -> mediforproto.DetectionInfo
	64, // 20: mediforproto.FusionRequest.request:type_name -> mediforproto.Fusion
	47, // 21: mediforproto.FusionRequest.tags:type_name -> mediforproto.FusionRequest.TagsEntry
	0,  // 22: mediforproto.FuserFusionInfo.stage:type_name -> mediforproto.DetectionStage
	1,  // 23: mediforproto.FuserFusionInfo.status:type_name -> mediforproto.DetectionStatus
	64, // 24: mediforproto.FuserFusionInfo.fusion:type_name -> mediforproto.Fusion
	15, // 25: mediforproto.FusionInfo.fusion_infos:type_name -> mediforproto.FuserFusionInfo
	48, // 26: mediforproto.FusionInfo.tags:type_name -> mediforproto.FusionInfo.TagsEntry
	49, // 27: mediforproto.UpdateDetectionTagsRequest.tags:type_name -> mediforproto.UpdateDetectionTagsRequest.TagsEntry
	50, // 28: mediforproto.DetectionTagInfoRequest.require_tags:type_name -> mediforproto.DetectionTagInfoRequest.RequireTagsEntry
	51, // 29: mediforproto.DetectionTagInfo.tag_counts:type_name -> mediforproto.DetectionTagInfo.TagCountsEntry
	52, // 30: mediforproto.DetectionTagInfo.user_tag_counts:type_name -> mediforproto.DetectionTagInfo.UserTagCountsEntry
	4,  // 31: mediforproto.AnalyticMeta.media:type_name -> mediforproto.MediaType
	53, // 32: mediforproto.AnalyticMeta.user_fields:type_name -> mediforproto.AnalyticMeta.UserFieldsEntry
	23, // 33: mediforproto.AnalyticList.analytics:type_name -> mediforproto.AnalyticMeta
	26, // 34: mediforproto.ListDetectionsRequest.score_filter:type_name -> mediforproto.ScoreFilter
	27, // 35: mediforproto.ListDetectionsRequest.meta_filters:type_name -> mediforproto.MetaFilter
	54, // 36: mediforproto.ListDetectionsRequest.tags:type_name -> mediforproto.ListDetectionsRequest.TagsEntry
	55, // 37: mediforproto.ListDetectionsRequest.exclude_tags:type_name -> mediforproto.ListDetectionsRequest.ExcludeTagsEntry
	6,  // 38: mediforproto.ListDetectionsRequest.order_by:type_name -> mediforproto.SortCol
	56, // 39: mediforproto.UpdateDetectionMetadataRequest.metadata:type_name -> mediforproto.UpdateDetectionMetadataRequest.MetadataEntry
	31, // 40: mediforproto.GetAnalyticStatsResponse.analytic_stats:type_name -> mediforproto.AnalyticStats
	31, // 41: mediforproto.GetAnalyticStatsResponse.fuser_stats:type_name -> mediforproto.AnalyticStats
	57, // 42: mediforproto.GetHistogramRequest.tags:type_name -> mediforproto.GetHistogramRequest.TagsEntry
	58, // 43: mediforproto.GetHistogramRequest.exclude_tags:type_name -> mediforproto.GetHistogramRequest.ExcludeTagsEntry
	34, // 44: mediforproto.GetHistogramResponse.buckets:type_name -> mediforproto.Bucket
	59, // 45: mediforproto.DeleteFailedAnalyticsResponse.deleted_analytics:type_name -> mediforproto.DeleteFailedAnalyticsResponse.DeletedAnalyticsEntry
	60, // 46: mediforproto.GetAnalyticsWithScoresRequest.tags:type_name -> mediforproto.GetAnalyticsWithScoresRequest.TagsEntry
	61, // 47: mediforproto.GetAnalyticsWithScoresRequest.exclude_tags:type_name -> mediforproto.GetAnalyticsWithScoresRequest.ExcludeTagsEntry
	37, // 48: mediforproto.DeleteFailedAnalyticsResponse.DeletedAnalyticsEntry.value:type_name -> mediforproto.DeletedAnalytics
	7,  // 49: mediforproto.Pipeline.Detect:input_type -> mediforproto.DetectionRequest
	10, // 50: mediforproto.Pipeline.GetDetectionInfo:input_type -> mediforproto.DetectionInfoRequest
	12, // 51: mediforproto.Pipeline.GetDetectionList:input_type -> mediforproto.DetectionListRequest
	22, // 52: mediforproto.Pipeline.DeleteDetection:input_type -> mediforproto.DeleteDetectionRequest
	14, // 53: mediforproto.Pipeline.Fuse:input_type -> mediforproto.FusionRequest
	14, // 54: mediforproto.Pipeline.FuseByID:input_type -> mediforproto.FusionRequest
	17, // 55: mediforproto.Pipeline.FuseAllIDs:input_type -> mediforproto.FuseAllIDsRequest
	19, // 56: mediforproto.Pipeline.UpdateDetectionTags:input_type -> mediforproto.UpdateDetectionTagsRequest
	20, // 57: mediforproto.Pipeline.GetDetectionTagInfo:input_type -> mediforproto.DetectionTagInfoRequest
	65, // 58: mediforproto.Pipeline.GetAnalyticMeta:input_type -> mediforproto.Empty
	25, // 59: mediforproto.Pipeline.ListDetections:input_type -> mediforproto.ListDetectionsRequest
	28, // 60: mediforproto.Pipeline.UpdateDetectionMetadata:input_type -> mediforproto.UpdateDetectionMetadataRequest
	29, // 61: mediforproto.Pipeline.GetAnalyticStats:input_type -> mediforproto.GetAnalyticStatsRequest
	32, // 62: mediforproto.Pipeline.GetHistogram:input_type -> mediforproto.GetHistogramRequest
	35, // 63: mediforproto.Pipeline.DeleteFailedAnalytics:input_type -> mediforproto.DeleteFailedAnalyticsRequest
	38, // 64: mediforproto.Pipeline.GetAnalyticsWithScores:input_type -> mediforproto.GetAnalyticsWithScoresRequest
	9,  // 65: mediforproto.Pipeline.Detect:output_type -> mediforproto.DetectionInfo
	9,  // 66: mediforproto.Pipeline.GetDetectionInfo:output_type -> mediforproto.DetectionInfo
	13, // 67: mediforproto.Pipeline.GetDetectionList:output_type -> mediforproto.DetectionList
	65, // 68: mediforproto.Pipeline.DeleteDetection:output_type -> mediforproto.Empty
	16, // 69: mediforproto.Pipeline.Fuse:output_type -> mediforproto.FusionInfo
	16, // 70: mediforproto.Pipeline.FuseByID:output_type -> mediforproto.FusionInfo
	18, // 71: mediforproto.Pipeline.FuseAllIDs:output_type -> mediforproto.FuseAllIDsResponse
	9,  // 72: mediforproto.Pipeline.UpdateDetectionTags:output_type -> mediforproto.DetectionInfo
	21, // 73: mediforproto.Pipeline.GetDetectionTagInfo:output_type -> mediforproto.DetectionTagInfo
	24, // 74: mediforproto.Pipeline.GetAnalyticMeta:output_type -> mediforproto.AnalyticList
	13, // 75: mediforproto.Pipeline.ListDetections:output_type -> mediforproto.DetectionList
	9,  // 76: mediforproto.Pipeline.UpdateDetectionMetadata:output_type -> mediforproto.DetectionInfo
	30, // 77: mediforproto.Pipeline.GetAnalyticStats:output_type -> mediforproto.GetAnalyticStatsResponse
	33, // 78: mediforproto.Pipeline.GetHistogram:output_type -> mediforproto.GetHistogramResponse
	36, // 79: mediforproto.Pipeline.DeleteFailedAnalytics:output_type -> mediforproto.DeleteFailedAnalyticsResponse
	39, // 80: mediforproto.Pipeline.GetAnalyticsWithScores:output_type -> mediforproto.GetAnalyticsWithScoresResponse
	65, // [65:81] is the sub-list for method output_type
	49, // [49:65] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_medifor_v1_pipeline_proto_init() }
func file_medifor_v1_pipeline_proto_init() {
	if File_medifor_v1_pipeline_proto != nil {
		return
	}
	file_medifor_v1_analytic_proto_init()
	file_medifor_v1_fusion_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_medifor_v1_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortCol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticDetectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FusionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuserFusionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FusionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseAllIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseAllIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDetectionTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionTagInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDetectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDetectionMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnalyticStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnalyticStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistogramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistogramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFailedAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFailedAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnalyticsWithScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_medifor_v1_pipeline_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnalyticsWithScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_medifor_v1_pipeline_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_medifor_v1_pipeline_proto_goTypes,
		DependencyIndexes: file_medifor_v1_pipeline_proto_depIdxs,
		EnumInfos:         file_medifor_v1_pipeline_proto_enumTypes,
		MessageInfos:      file_medifor_v1_pipeline_proto_msgTypes,
	}.Build()
	File_medifor_v1_pipeline_proto = out.File
	file_medifor_v1_pipeline_proto_rawDesc = nil
	file_medifor_v1_pipeline_proto_goTypes = nil
	file_medifor_v1_pipeline_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PipelineClient is the client API for Pipeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineClient interface {
	Detect(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionInfo, error)
	GetDetectionInfo(ctx context.Context, in *DetectionInfoRequest, opts ...grpc.CallOption) (*DetectionInfo, error)
	GetDetectionList(ctx context.Context, in *DetectionListRequest, opts ...grpc.CallOption) (*DetectionList, error)
	DeleteDetection(ctx context.Context, in *DeleteDetectionRequest, opts ...grpc.CallOption) (*Empty, error)
	Fuse(ctx context.Context, in *FusionRequest, opts ...grpc.CallOption) (*FusionInfo, error)
	FuseByID(ctx context.Context, in *FusionRequest, opts ...grpc.CallOption) (*FusionInfo, error)
	FuseAllIDs(ctx context.Context, in *FuseAllIDsRequest, opts ...grpc.CallOption) (*FuseAllIDsResponse, error)
	UpdateDetectionTags(ctx context.Context, in *UpdateDetectionTagsRequest, opts ...grpc.CallOption) (*DetectionInfo, error)
	GetDetectionTagInfo(ctx context.Context, in *DetectionTagInfoRequest, opts ...grpc.CallOption) (*DetectionTagInfo, error)
	GetAnalyticMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AnalyticList, error)
	ListDetections(ctx context.Context, in *ListDetectionsRequest, opts ...grpc.CallOption) (*DetectionList, error)
	UpdateDetectionMetadata(ctx context.Context, in *UpdateDetectionMetadataRequest, opts ...grpc.CallOption) (*DetectionInfo, error)
	GetAnalyticStats(ctx context.Context, in *GetAnalyticStatsRequest, opts ...grpc.CallOption) (*GetAnalyticStatsResponse, error)
	GetHistogram(ctx context.Context, in *GetHistogramRequest, opts ...grpc.CallOption) (*GetHistogramResponse, error)
	DeleteFailedAnalytics(ctx context.Context, in *DeleteFailedAnalyticsRequest, opts ...grpc.CallOption) (*DeleteFailedAnalyticsResponse, error)
	GetAnalyticsWithScores(ctx context.Context, in *GetAnalyticsWithScoresRequest, opts ...grpc.CallOption) (*GetAnalyticsWithScoresResponse, error)
}

type pipelineClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineClient(cc grpc.ClientConnInterface) PipelineClient {
	return &pipelineClient{cc}
}

func (c *pipelineClient) Detect(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionInfo, error) {
	out := new(DetectionInfo)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) GetDetectionInfo(ctx context.Context, in *DetectionInfoRequest, opts ...grpc.CallOption) (*DetectionInfo, error) {
	out := new(DetectionInfo)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/GetDetectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) GetDetectionList(ctx context.Context, in *DetectionListRequest, opts ...grpc.CallOption) (*DetectionList, error) {
	out := new(DetectionList)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/GetDetectionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) DeleteDetection(ctx context.Context, in *DeleteDetectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/DeleteDetection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) Fuse(ctx context.Context, in *FusionRequest, opts ...grpc.CallOption) (*FusionInfo, error) {
	out := new(FusionInfo)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/Fuse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) FuseByID(ctx context.Context, in *FusionRequest, opts ...grpc.CallOption) (*FusionInfo, error) {
	out := new(FusionInfo)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/FuseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) FuseAllIDs(ctx context.Context, in *FuseAllIDsRequest, opts ...grpc.CallOption) (*FuseAllIDsResponse, error) {
	out := new(FuseAllIDsResponse)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/FuseAllIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) UpdateDetectionTags(ctx context.Context, in *UpdateDetectionTagsRequest, opts ...grpc.CallOption) (*DetectionInfo, error) {
	out := new(DetectionInfo)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/UpdateDetectionTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) GetDetectionTagInfo(ctx context.Context, in *DetectionTagInfoRequest, opts ...grpc.CallOption) (*DetectionTagInfo, error) {
	out := new(DetectionTagInfo)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/GetDetectionTagInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) GetAnalyticMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AnalyticList, error) {
	out := new(AnalyticList)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/GetAnalyticMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) ListDetections(ctx context.Context, in *ListDetectionsRequest, opts ...grpc.CallOption) (*DetectionList, error) {
	out := new(DetectionList)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/ListDetections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) UpdateDetectionMetadata(ctx context.Context, in *UpdateDetectionMetadataRequest, opts ...grpc.CallOption) (*DetectionInfo, error) {
	out := new(DetectionInfo)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/UpdateDetectionMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) GetAnalyticStats(ctx context.Context, in *GetAnalyticStatsRequest, opts ...grpc.CallOption) (*GetAnalyticStatsResponse, error) {
	out := new(GetAnalyticStatsResponse)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/GetAnalyticStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) GetHistogram(ctx context.Context, in *GetHistogramRequest, opts ...grpc.CallOption) (*GetHistogramResponse, error) {
	out := new(GetHistogramResponse)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/GetHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) DeleteFailedAnalytics(ctx context.Context, in *DeleteFailedAnalyticsRequest, opts ...grpc.CallOption) (*DeleteFailedAnalyticsResponse, error) {
	out := new(DeleteFailedAnalyticsResponse)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/DeleteFailedAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineClient) GetAnalyticsWithScores(ctx context.Context, in *GetAnalyticsWithScoresRequest, opts ...grpc.CallOption) (*GetAnalyticsWithScoresResponse, error) {
	out := new(GetAnalyticsWithScoresResponse)
	err := c.cc.Invoke(ctx, "/mediforproto.Pipeline/GetAnalyticsWithScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServer is the server API for Pipeline service.
type PipelineServer interface {
	Detect(context.Context, *DetectionRequest) (*DetectionInfo, error)
	GetDetectionInfo(context.Context, *DetectionInfoRequest) (*DetectionInfo, error)
	GetDetectionList(context.Context, *DetectionListRequest) (*DetectionList, error)
	DeleteDetection(context.Context, *DeleteDetectionRequest) (*Empty, error)
	Fuse(context.Context, *FusionRequest) (*FusionInfo, error)
	FuseByID(context.Context, *FusionRequest) (*FusionInfo, error)
	FuseAllIDs(context.Context, *FuseAllIDsRequest) (*FuseAllIDsResponse, error)
	UpdateDetectionTags(context.Context, *UpdateDetectionTagsRequest) (*DetectionInfo, error)
	GetDetectionTagInfo(context.Context, *DetectionTagInfoRequest) (*DetectionTagInfo, error)
	GetAnalyticMeta(context.Context, *Empty) (*AnalyticList, error)
	ListDetections(context.Context, *ListDetectionsRequest) (*DetectionList, error)
	UpdateDetectionMetadata(context.Context, *UpdateDetectionMetadataRequest) (*DetectionInfo, error)
	GetAnalyticStats(context.Context, *GetAnalyticStatsRequest) (*GetAnalyticStatsResponse, error)
	GetHistogram(context.Context, *GetHistogramRequest) (*GetHistogramResponse, error)
	DeleteFailedAnalytics(context.Context, *DeleteFailedAnalyticsRequest) (*DeleteFailedAnalyticsResponse, error)
	GetAnalyticsWithScores(context.Context, *GetAnalyticsWithScoresRequest) (*GetAnalyticsWithScoresResponse, error)
}

// UnimplementedPipelineServer can be embedded to have forward compatible implementations.
type UnimplementedPipelineServer struct {
}

func (*UnimplementedPipelineServer) Detect(context.Context, *DetectionRequest) (*DetectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (*UnimplementedPipelineServer) GetDetectionInfo(context.Context, *DetectionInfoRequest) (*DetectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetectionInfo not implemented")
}
func (*UnimplementedPipelineServer) GetDetectionList(context.Context, *DetectionListRequest) (*DetectionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetectionList not implemented")
}
func (*UnimplementedPipelineServer) DeleteDetection(context.Context, *DeleteDetectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDetection not implemented")
}
func (*UnimplementedPipelineServer) Fuse(context.Context, *FusionRequest) (*FusionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fuse not implemented")
}
func (*UnimplementedPipelineServer) FuseByID(context.Context, *FusionRequest) (*FusionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuseByID not implemented")
}
func (*UnimplementedPipelineServer) FuseAllIDs(context.Context, *FuseAllIDsRequest) (*FuseAllIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuseAllIDs not implemented")
}
func (*UnimplementedPipelineServer) UpdateDetectionTags(context.Context, *UpdateDetectionTagsRequest) (*DetectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetectionTags not implemented")
}
func (*UnimplementedPipelineServer) GetDetectionTagInfo(context.Context, *DetectionTagInfoRequest) (*DetectionTagInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetectionTagInfo not implemented")
}
func (*UnimplementedPipelineServer) GetAnalyticMeta(context.Context, *Empty) (*AnalyticList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyticMeta not implemented")
}
func (*UnimplementedPipelineServer) ListDetections(context.Context, *ListDetectionsRequest) (*DetectionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDetections not implemented")
}
func (*UnimplementedPipelineServer) UpdateDetectionMetadata(context.Context, *UpdateDetectionMetadataRequest) (*DetectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetectionMetadata not implemented")
}
func (*UnimplementedPipelineServer) GetAnalyticStats(context.Context, *GetAnalyticStatsRequest) (*GetAnalyticStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyticStats not implemented")
}
func (*UnimplementedPipelineServer) GetHistogram(context.Context, *GetHistogramRequest) (*GetHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistogram not implemented")
}
func (*UnimplementedPipelineServer) DeleteFailedAnalytics(context.Context, *DeleteFailedAnalyticsRequest) (*DeleteFailedAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFailedAnalytics not implemented")
}
func (*UnimplementedPipelineServer) GetAnalyticsWithScores(context.Context, *GetAnalyticsWithScoresRequest) (*GetAnalyticsWithScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyticsWithScores not implemented")
}

func RegisterPipelineServer(s *grpc.Server, srv PipelineServer) {
	s.RegisterService(&_Pipeline_serviceDesc, srv)
}

func _Pipeline_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).Detect(ctx, req.(*DetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_GetDetectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).GetDetectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/GetDetectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).GetDetectionInfo(ctx, req.(*DetectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_GetDetectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).GetDetectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/GetDetectionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).GetDetectionList(ctx, req.(*DetectionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_DeleteDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).DeleteDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/DeleteDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).DeleteDetection(ctx, req.(*DeleteDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_Fuse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).Fuse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/Fuse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).Fuse(ctx, req.(*FusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_FuseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).FuseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/FuseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).FuseByID(ctx, req.(*FusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_FuseAllIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuseAllIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).FuseAllIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/FuseAllIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).FuseAllIDs(ctx, req.(*FuseAllIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_UpdateDetectionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDetectionTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).UpdateDetectionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/UpdateDetectionTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).UpdateDetectionTags(ctx, req.(*UpdateDetectionTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_GetDetectionTagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionTagInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).GetDetectionTagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/GetDetectionTagInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).GetDetectionTagInfo(ctx, req.(*DetectionTagInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_GetAnalyticMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).GetAnalyticMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/GetAnalyticMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).GetAnalyticMeta(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_ListDetections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).ListDetections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/ListDetections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).ListDetections(ctx, req.(*ListDetectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_UpdateDetectionMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDetectionMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).UpdateDetectionMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/UpdateDetectionMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).UpdateDetectionMetadata(ctx, req.(*UpdateDetectionMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_GetAnalyticStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalyticStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).GetAnalyticStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/GetAnalyticStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).GetAnalyticStats(ctx, req.(*GetAnalyticStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_GetHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).GetHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/GetHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).GetHistogram(ctx, req.(*GetHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_DeleteFailedAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFailedAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).DeleteFailedAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/DeleteFailedAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).DeleteFailedAnalytics(ctx, req.(*DeleteFailedAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipeline_GetAnalyticsWithScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalyticsWithScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).GetAnalyticsWithScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediforproto.Pipeline/GetAnalyticsWithScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).GetAnalyticsWithScores(ctx, req.(*GetAnalyticsWithScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pipeline_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mediforproto.Pipeline",
	HandlerType: (*PipelineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _Pipeline_Detect_Handler,
		},
		{
			MethodName: "GetDetectionInfo",
			Handler:    _Pipeline_GetDetectionInfo_Handler,
		},
		{
			MethodName: "GetDetectionList",
			Handler:    _Pipeline_GetDetectionList_Handler,
		},
		{
			MethodName: "DeleteDetection",
			Handler:    _Pipeline_DeleteDetection_Handler,
		},
		{
			MethodName: "Fuse",
			Handler:    _Pipeline_Fuse_Handler,
		},
		{
			MethodName: "FuseByID",
			Handler:    _Pipeline_FuseByID_Handler,
		},
		{
			MethodName: "FuseAllIDs",
			Handler:    _Pipeline_FuseAllIDs_Handler,
		},
		{
			MethodName: "UpdateDetectionTags",
			Handler:    _Pipeline_UpdateDetectionTags_Handler,
		},
		{
			MethodName: "GetDetectionTagInfo",
			Handler:    _Pipeline_GetDetectionTagInfo_Handler,
		},
		{
			MethodName: "GetAnalyticMeta",
			Handler:    _Pipeline_GetAnalyticMeta_Handler,
		},
		{
			MethodName: "ListDetections",
			Handler:    _Pipeline_ListDetections_Handler,
		},
		{
			MethodName: "UpdateDetectionMetadata",
			Handler:    _Pipeline_UpdateDetectionMetadata_Handler,
		},
		{
			MethodName: "GetAnalyticStats",
			Handler:    _Pipeline_GetAnalyticStats_Handler,
		},
		{
			MethodName: "GetHistogram",
			Handler:    _Pipeline_GetHistogram_Handler,
		},
		{
			MethodName: "DeleteFailedAnalytics",
			Handler:    _Pipeline_DeleteFailedAnalytics_Handler,
		},
		{
			MethodName: "GetAnalyticsWithScores",
			Handler:    _Pipeline_GetAnalyticsWithScores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medifor/v1/pipeline.proto",
}
